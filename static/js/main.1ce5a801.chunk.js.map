{"version":3,"sources":["data sync /^/.//.*_Line/.json$","data sync /^/.//.*_Bar/.json$","data sync /^/.//.*_Scatter/.json$","Timeline/LineGraph.js","Timeline/LineFrame.js","Bar/RaceBar.js","Bar/BarFrame.js","Scatter/ScatterGraph.js","Scatter/ScatterFrame.js","Topic/Topic.js","App.js","index.js"],"names":["map","./0_Line.json","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","./0_Bar.json","./0_Scatter.json","LineGraph","min","this","props","area","react_default","a","createElement","nivo_line_esm","data","margin","top","right","bottom","left","xScale","type","max","yScale","stacked","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","title","curve","enableSlices","colors","pointSize","pointColor","enableArea","areaOpacity","pointBorderWidth","pointBorderColor","from","pointLabel","pointLabelYOffset","useMesh","sliceTooltip","_ref","slice","style","background","padding","border","points","sort","b","hasOwnProperty","yStacked","y","point","Row","key","alignItems","width","height","backgroundColor","serieColor","Col","minWidth","maxWidth","serieId","textAlign","yFormatted","Component","LineFrame","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","options","category","variable","normalizer","selectedKeys","topicIndex","variableItems","categoryItems","normalizerItems","filteredData","filteredColors","selectedChanged","normalizedData","changeInput","bind","assertThisInitialized","checkBox","event","checked","target","name","setState","value","_this2","ct","require","toString","push","MenuItem","groupingdata","normalizerdata","colorcode","color","ColorCheckbox","withStyles","root","Checkbox","assign","undefined","onChange","wordWrap","checkboxes","member","years_index","t_entry","normalizedEntry","t_year","t_value","t_index","t_normalizer","x","LineGraph_LineGraph","overflowY","display","paddingLeft","marginBottom","react_switch_default","onColor","marginLeft","fontFamily","InputLabel","shrink","htmlFor","Select","input","Input","displayEmpty","whiteSpace","borderRadius","StyledSlider","mark","Slider","BarComponent","txt","_color","_byIndex","length","textAnchor","dominantBaseline","fill","fontWeight","fontSize","transform","concat","strokeWidth","stroke","fillOpacity","Sample","dataGenerator","groupMode","_useState","useState","_useState2","slicedToArray","current","setCurrent","useEffect","timer","setTimeout","clearTimeout","barData","ranking","_total","numberOfItems","Fragment","nivo_bar_esm","barComponent","pkeys","indexBy","colorBy","layout","borderColor","modifiers","enableGridX","enableGridY","labelSkipWidth","labelSkipHeight","labelTextColor","animate","motionStiffness","motionDamping","Fab","onClick","size","aria-label","PlayArrow_default","Pause_default","aria-labelledby","step","newValue","marks","BarFrame","selectedItems","t_sum","item","RaceBar","Scatter","nivo_scatterplot_esm","blendMode","titleX","titleY","ScatterGraph_StyledSlider","ScatterFrame","variableX","variableY","normalizerX","variableItemsXY","i","headers","t_normalizerX","ScatterGraph","graphTypes","graphIcons","Timeline_default","Notes_default","ScatterPlot_default","Map_default","Topic","state","graphIndex","changeInnerTab","graphtabs","graph","LineFrame_LineFrame","Tab","label","icon","BarFrame_BarFrame","ScatterFrame_ScatterFrame","flexGrow","AppBar","position","Tabs","TabIndicatorProps","variant","scrollButtons","indicatorColor","textColor","ScrollableTabs","handleChange","tabs","projects","Topic_Topic","ReactDOM","render","App_ScrollableTabs","document","getElementById"],"mappings":"0NAAA,IAAAA,EAAA,CACAC,gBAAA,KAIA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAAF,GACA,OAAAG,EAAAF,GAEA,SAAAC,EAAAF,GACA,IAAAG,EAAAC,EAAAP,EAAAG,GAAA,CACA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAEA,MADAK,EAAAE,KAAA,mBACAF,EAEA,OAAAR,EAAAG,GAEAD,EAAAS,KAAA,WACA,OAAAC,OAAAD,KAAAX,IAEAE,EAAAW,QAAAR,EACAS,EAAAC,QAAAb,EACAA,EAAAE,GAAA,yqECtBA,IAAAJ,EAAA,CACAgB,eAAA,KAIA,SAAAd,EAAAC,GACA,IAAAC,EAAAC,EAAAF,GACA,OAAAG,EAAAF,GAEA,SAAAC,EAAAF,GACA,IAAAG,EAAAC,EAAAP,EAAAG,GAAA,CACA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAEA,MADAK,EAAAE,KAAA,mBACAF,EAEA,OAAAR,EAAAG,GAEAD,EAAAS,KAAA,WACA,OAAAC,OAAAD,KAAAX,IAEAE,EAAAW,QAAAR,EACAS,EAAAC,QAAAb,EACAA,EAAAE,GAAA,s5ECtBA,IAAAJ,EAAA,CACAiB,mBAAA,KAIA,SAAAf,EAAAC,GACA,IAAAC,EAAAC,EAAAF,GACA,OAAAG,EAAAF,GAEA,SAAAC,EAAAF,GACA,IAAAG,EAAAC,EAAAP,EAAAG,GAAA,CACA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAEA,MADAK,EAAAE,KAAA,mBACAF,EAEA,OAAAR,EAAAG,GAEAD,EAAAS,KAAA,WACA,OAAAC,OAAAD,KAAAX,IAEAE,EAAAW,QAAAR,EACAS,EAAAC,QAAAb,EACAA,EAAAE,GAAA,kwFClBqBc,mLAKb,IAAIC,EAAI,OAGR,OAFGC,KAAKC,MAAMC,OAAMH,EAAI,GAGpBI,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIC,KAAMP,KAAKC,MAAMM,KACjBC,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAChDC,OAAQ,CAAEC,KAAM,QAASf,IAAK,OAAQgB,IAAK,QAC3CC,OAAQ,CAAEF,KAAM,SAAUG,QAASjB,KAAKC,MAAMgB,QAASlB,IAAKA,EAAKgB,IAAK,QACtEG,QAAS,KACTC,UAAW,KACXC,WAAY,CACRC,OAAQ,SACRC,SAAU,EACVC,YAAa,EACbC,cAAe,GACfC,OAAQ,OACRC,aAAc,GACdC,eAAgB,UAEpBC,SAAU,CACNP,OAAQ,OACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQzB,KAAKC,MAAM4B,MACnBH,cAAe,GACfC,eAAgB,UAEpBG,MAAO9B,KAAKC,MAAM6B,MAClBC,aAAa,IACbC,OAAQhC,KAAKC,MAAM+B,OACnBC,UAAW,GACXC,WAAW,UACXC,WAAYnC,KAAKC,MAAMC,KACvBkC,YAAa,GACbC,iBAAkB,EAClBC,iBAAkB,CAAEC,KAAM,cAC1BC,WAAW,IACXC,mBAAoB,GACpBC,SAAS,EACTC,aAAc,SAAAC,GAAe,IAAZC,EAAYD,EAAZC,MAEb,OACA1C,EAAAC,EAAAC,cAAA,OACIyC,MAAO,CACPC,WAAY,QACZC,QAAS,WACTC,OAAQ,mBAGPJ,EAAMK,OAAOC,KAAK,SAAC/C,EAAEgD,GAClB,OAAGA,EAAE7C,KAAK8C,eAAe,YACdD,EAAE7C,KAAK+C,SAASlD,EAAEG,KAAK+C,SAE3BF,EAAE7C,KAAKgD,EAAEnD,EAAEG,KAAKgD,IACxB3E,IAAI,SAAA4E,GAAK,OACRrD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAKC,IAAKF,EAAMxE,GAAI8D,MAAO,CAACtC,OAAO,IAAKmD,WAAW,WAE/CxD,EAAAC,EAAAC,cAAA,OAAKyC,MAAO,CACRtC,OAAQ,OACRoD,MAAO,OAAQC,OAAO,OACtBC,gBAAgBN,EAAMO,cAG1B5D,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,CAAKlB,MAAO,CAACmB,SAAS,MAAMC,SAAS,QAASV,EAAMW,SAGpDhE,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,CAAKlB,MAAO,CAACmB,SAAS,KAAKC,SAAS,MAAOE,UAAU,UACjDjE,EAAAC,EAAAC,cAAA,cAASmD,EAAMjD,KAAK8D,2BA1EjBC,oFCelBC,cAEjB,SAAAA,EAAYtE,GAAM,IAAAuE,EAAA,OAAAhF,OAAAiF,EAAA,EAAAjF,CAAAQ,KAAAuE,IACdC,EAAAhF,OAAAkF,EAAA,EAAAlF,CAAAQ,KAAAR,OAAAmF,EAAA,EAAAnF,CAAA+E,GAAAK,KAAA5E,KAAMC,KACD4E,QAAU,CACXC,SAAkB,OAClBC,SAAkB,GAClBjD,MAAkB,WAClBkD,WAAkB,GAClB/D,SAAkB,EAClBgE,aAAkB,IAGtBT,EAAKjE,KAAqB,GAC1BiE,EAAKU,YAAsB,EAC3BV,EAAKO,SAAqB,GAC1BP,EAAKM,SAAqB,OAC1BN,EAAKW,cAAqB,GAC1BX,EAAKY,cAAqB,GAC1BZ,EAAKa,gBAAqB,GAE1Bb,EAAK/C,OAAqB,GAC1B+C,EAAKxC,OAAqB,GAC1BwC,EAAKc,aAAqB,GAC1Bd,EAAKe,eAAqB,GAC1Bf,EAAKgB,iBAAqB,EAC1BhB,EAAKiB,eAAqB,GAE1BjB,EAAKkB,YAAqBlB,EAAKkB,YAAYC,KAAjBnG,OAAAoG,EAAA,EAAApG,CAAAgF,IAC1BA,EAAKqB,SAAqBrB,EAAKqB,SAASF,KAAdnG,OAAAoG,EAAA,EAAApG,CAAAgF,IA3BZA,wEAgCTsB,EAAOC,GACZ/F,KAAK6E,QAAQI,aAAaa,EAAME,OAAOC,MAAQF,EAC/C/F,KAAKwF,iBAAkB,EACvBxF,KAAKkG,SAAS,wCAGNJ,GACG,YAARA,EACC9F,KAAK6E,QAAQ5D,SAAWjB,KAAK6E,QAAQ5D,SAErCjB,KAAK6E,QAAQiB,EAAME,OAAOC,MAAQH,EAAME,OAAOG,MACxB,eAApBL,EAAME,OAAOC,OACZjG,KAAKwF,iBAAkB,IAG/BxF,KAAKkG,SAAS,qCAMV,IAAAE,EAAApG,KAIAqG,EAAK,EACL3C,EAAM,GAGNwB,EAAkBlF,KAAKC,MAAMiF,WAC7BjE,EAAkBjB,KAAK6E,QAAL,QAClBC,EAAkB9E,KAAK6E,QAAL,SAClB/C,EAAkB9B,KAAK6E,QAAL,MAClBE,EAAkB/E,KAAK6E,QAAL,SAClBG,EAAkBhF,KAAK6E,QAAL,WAGtB,GAAG7E,KAAKkF,aAAeA,EAAW,CAQ9B,IAAIxB,KALJ1D,KAAKkF,WAAaA,EAClBlF,KAAKO,KAAO+F,OAAQ,KAAapB,EAAWqB,WAAa,cAGzDvG,KAAKmF,cAAgB,GACVnF,KAAKO,KACZP,KAAKmF,cAAcqB,KACfrG,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAU/C,IAAKA,EAAKyC,MAAOzC,GAAMA,IAKzCqB,EAAYvF,OAAOD,KAAKS,KAAKO,MAAM,GACnCP,KAAK6E,QAAL,SAA2BE,EAI/B,GAAG/E,KAAK+E,WAAaA,GAAY/E,KAAKkF,aAAeA,EAAW,CAE5D,IAAIwB,EAAsB1G,KAAKO,KAAKwE,GAAV,MACtB4B,EAAsB3G,KAAKO,KAAKwE,GAAV,WAS1B,IAAIrB,KAPJ1D,KAAK6E,QAAL,SAA8B,OAC9B7E,KAAK6E,QAAL,WAA8B,GAC9BC,EAA8B,OAC9BE,EAA8B,GAG9BhF,KAAKoF,cAAgB,GACVsB,EACP1G,KAAKoF,cAAcoB,KACfrG,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAU/C,IAAKA,EAAKyC,MAAOzC,GAAMA,IAOzC,IAAIA,KADJ1D,KAAKqF,gBAAkB,GACZsB,EACP3G,KAAKqF,gBAAgBmB,KACjBrG,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAU/C,IAAKA,EAAKyC,MAAOzC,GAAMA,IAQzC,IAAIA,KAHJ1D,KAAKwF,iBAAkB,EACvBxF,KAAK6E,QAAL,aAA+B,GAC/BwB,EAAK,EACMrG,KAAKO,KAAKwE,GAAV,KACP/E,KAAK6E,QAAL,aAA6BnB,GAAQ2C,IA7H7B,GAqIhB,GAAGrG,KAAKwF,iBAAmBxF,KAAK8E,WAAaA,GACzC9E,KAAK+E,WAAaA,GAAY/E,KAAKkF,aAAeA,EAAW,CAE7DlF,KAAKyB,OAAa,GAClBzB,KAAKgC,OAAa,GAClB,IAAI4E,EAAc5G,KAAKO,KAAKwE,GAAV,MAA6BD,GAE/C,IAAIpB,KAAOkD,EAAU,CACjB,IAAIC,EAAQD,EAAUlD,GAAV,MACRoD,EAAgBC,YAAW,CACvBC,KAAM,CACFH,MAAOA,IAFCE,CAIb,SAAA9G,GAAK,OAAIE,EAAAC,EAAAC,cAAC4G,EAAA,EAADzH,OAAA0H,OAAA,CAAUL,MAAM,WAAc5G,MAG9C,QAA+BkH,IAA5BP,EAAUlD,GAAV,QACC1D,KAAKgC,OAAO0B,GAAOmD,EACnB7G,KAAKyB,OAAO+E,KACRrG,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAKC,IAAKA,EAAKZ,MAAO,CAACtC,OAAO,IAAKmD,WAAW,WAC1CxD,EAAAC,EAAAC,cAACyG,EAAD,CACIb,KAAMvC,EACNqC,QAAS/F,KAAK6E,QAAQI,aAAavB,GACnC0D,SAAUpH,KAAK6F,SACfM,MAAM,aAEVhG,EAAAC,EAAAC,cAAA,OAAKyC,MAAO,CAACoB,SAAS,OAAOmD,SAAU,eAAgB3D,SAK/D,CAEA,IAAI4D,EAAa,GACjB,IAAI,IAAIC,KAAUX,EAAUlD,GAAV,QACd1D,KAAKgC,OAAO4E,EAAUlD,GAAV,QAA0B6D,IAAWV,EACjDS,EAAWd,KACPrG,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAKC,IAAKkD,EAAUlD,GAAV,QAA0B6D,GAASzE,MAAO,CAACtC,OAAO,IAAKmD,WAAW,WACxExD,EAAAC,EAAAC,cAACyG,EAAD,CACIb,KAAMW,EAAUlD,GAAV,QAA0B6D,GAChCxB,QAAS/F,KAAK6E,QAAQI,aAAa2B,EAAUlD,GAAV,QAA0B6D,IAC7DH,SAAUpH,KAAK6F,SACfM,MAAM,aAEVhG,EAAAC,EAAAC,cAAA,OAAKyC,MAAO,CAACc,MAAM,OAAOyD,SAAU,eAC/BT,EAAUlD,GAAV,QAA0B6D,MAM3CvH,KAAKyB,OAAO+E,KACRrG,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAKC,IAAKA,EAAKZ,MAAO,CAACtC,OAAO,IAAKmD,WAAW,WAC1CxD,EAAAC,EAAAC,cAAA,OAAKyC,MAAO,CAACuE,SAAU,aAAazD,MAAM,SAAUF,GACnD4D,KAKjBtH,KAAKwF,iBAAkB,EAI3B,GAAGxF,KAAKwF,gBAAgB,CACpBxF,KAAKsF,aAAiB,GACtBtF,KAAKuF,eAAiB,GACtB,IAAIiC,EAAcxH,KAAKO,KAAKwE,GAAV,MAGlB,IAAIrB,KAAO1D,KAAK6E,QAAQI,aACpB,GAAGjF,KAAK6E,QAAQI,aAAavB,GAAK,CAC9B,IAAI+D,EAAUzH,KAAKO,KAAKwE,GAAV,KAA4BrB,GACtCgE,EAAkB,CAACnH,KAAK,GAAGvB,GAAG0E,GAGlC,IAAI,IAAIiE,KAAUF,EAAQ,CAEtB,IAAIG,EAAkBH,EAAQE,GAC1BE,EAAkBL,EAAYG,GAC9BG,EAAkB,EACJ,KAAf9C,IACC8C,EAAe9H,KAAKO,KAAKwE,GAAV,WAAkCC,GAAYtB,GAAKiE,IAGtED,EAAe,KAASG,GAAW,CAC/BE,EAAKJ,EACLpE,EAAKqE,EAAUE,GAIvB9H,KAAKsF,aAAakB,KAAKkB,GACvB1H,KAAKuF,eAAeiB,KAAKxG,KAAKgC,OAAO0B,KAUjD,OALA1D,KAAKkF,WAAqBA,EAC1BlF,KAAK+E,SAAqBA,EAC1B/E,KAAK8E,SAAqBA,EAC1B9E,KAAKwF,iBAAqB,EAGlBrF,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAKX,MAAO,CAACc,MAAM,OAAQpD,OAAO,IAAKwC,QAAQ,MAG3C7C,EAAAC,EAAAC,cAAA,OAAKyC,MAAO,CAACe,OAAO,QAASD,MAAM,QAC9BzD,EAAAC,EAAAC,cAAC2H,EAAD,CACWzH,KAAWP,KAAKsF,aAChBrE,QAAWA,EACXf,KAAWe,EACXa,MAAWA,EACXD,MAAW7B,KAAKO,KAAKwE,GAAUlD,MAC/BG,OAAWhC,KAAKuF,kBAIhCpF,EAAAC,EAAAC,cAAA,OAAKyC,MAAO,CAACe,OAAO,QAASD,MAAM,MAAOZ,QAAQ,KAAMiF,UAAW,WAG/D9H,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAKX,MAAO,CAACoF,QAAQ,OAAOC,YAAY,MAAOC,aAAc,OACzDjI,EAAAC,EAAAC,cAACgI,EAAAjI,EAAD,CAAQkI,QAAc,UACdlB,SAAe,WAAOhB,EAAKV,YAAY,YACvCK,QAAe9E,EACfkF,MAAelF,IACvBd,EAAAC,EAAAC,cAAA,OAAKyC,MAAO,CAACyF,WAAW,KAAMC,WAAW,YAAzC,YAEJrI,EAAAC,EAAAC,cAAA,WAGAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoI,EAAA,EAAD,CAAYC,QAAM,EAACC,QAAQ,2BAA3B,cAGAxI,EAAAC,EAAAC,cAACuI,EAAA,EAAD,CACI9F,MAAe,CAACc,MAAM,QACtBuC,MAAerE,EACfsF,SAAepH,KAAK0F,YACpBmD,MAAe1I,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAO7C,KAAK,QAAQjH,GAAG,4BACtCiH,KAAc,QACd8C,cAAY,GAEZ5I,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAUN,MAAO,YAAjB,UACAhG,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAUN,MAAO,UAAjB,YAGRhG,EAAAC,EAAAC,cAAA,WAGAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoI,EAAA,EAAD,CAAYC,QAAM,EAACC,QAAQ,8BAA3B,YAGAxI,EAAAC,EAAAC,cAACuI,EAAA,EAAD,CACI9F,MAAe,CAACc,MAAM,QACtBuC,MAAepB,EACfqC,SAAepH,KAAK0F,YACpBmD,MAAe1I,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAO7C,KAAK,WAAWjH,GAAG,+BACzCiH,KAAc,WACd8C,cAAY,GAEX/I,KAAKmF,gBAGdhF,EAAAC,EAAAC,cAAA,WAGAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoI,EAAA,EAAD,CAAYC,QAAM,EAACC,QAAQ,+BAA3B,aAGAxI,EAAAC,EAAAC,cAACuI,EAAA,EAAD,CACI9F,MAAe,CAACc,MAAM,QACtBuC,MAAenB,EACfoC,SAAepH,KAAK0F,YACpBmD,MAAe1I,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAO7C,KAAK,aAAajH,GAAG,gCAC3CiH,KAAc,aACd8C,cAAY,GAEZ5I,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAUN,MAAO,IAAjB,QACCnG,KAAKqF,kBAGdlF,EAAAC,EAAAC,cAAA,WAGAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoI,EAAA,EAAD,CAAYC,QAAM,EAACC,QAAQ,gCAA3B,cAGAxI,EAAAC,EAAAC,cAACuI,EAAA,EAAD,CACI9F,MAAe,CAACc,MAAM,QACtBuC,MAAerB,EACfsC,SAAepH,KAAK0F,YACpBmD,MAAe1I,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAO7C,KAAK,aAAajH,GAAG,iCAC3CiH,KAAc,WACd8C,cAAY,GAEX/I,KAAKoF,gBAGdjF,EAAAC,EAAAC,cAAA,WAGAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKyC,MAAO,CACAoF,QAAkB,eAClBtE,MAAkB,OAClBK,SAAkB,OAClB+E,WAAkB,SAClBC,aAAkB,MAClBT,WAAkB,YAEzBxI,KAAKyB,kBAvVC6C,oFCDjC4E,EAAenC,YAPN,CACXoC,KAAM,CACFvF,MAAM,MACNC,OAAO,MACPC,gBAAgB,SAGHiD,CAAmBqC,KAIlCC,EAAe,SAAApJ,GACjB,IAAIqJ,EAAM,KAGNC,EAAStJ,EAAMM,KAAKA,KAAKgJ,OAoC7B,OAnCGtJ,EAAMM,KAAKA,KAAKiJ,WACfD,EAAStJ,EAAM4G,OAIhB,GAAG5G,EAAMM,KAAKvB,GAAGuH,WAAWkD,OAASxJ,EAAM2D,OAAS,GAAO3D,EAAM4D,SAChEyF,EAAK,CAACnJ,EAAAC,EAAAC,cAAA,QACFqD,IAAKzD,EAAMM,KAAKA,KAAKvB,GAAGuH,WAAWtG,EAAMM,KAAKvB,GAAGuH,WAAW,KAC5DwB,EAAG9H,EAAM2D,MAAQ,GACjBL,EAAGtD,EAAM4D,OAAS,EAAI,EACtB6F,WAAW,MACXC,iBAAiB,UACjBC,KAAK,QACL9G,MAAO,CACP+G,WAAY,IACZC,SAAU,KAGT7J,EAAMM,KAAKvB,IAEhBmB,EAAAC,EAAAC,cAAA,QACIqD,IAAKzD,EAAMM,KAAKA,KAAKvB,GAAGuH,WAAWtG,EAAMM,KAAKvB,GAAGuH,WAAW,MAC5DwB,EAAG9H,EAAM2D,MAAQ,GACjBL,EAAGtD,EAAM4D,OAAS,EAAI,GACtB6F,WAAW,MACXC,iBAAiB,UACjBC,KAAM,aACN9G,MAAO,CACP+G,WAAY,IACZC,SAAU,KAGT7J,EAAMM,KAAK4F,SAIhBhG,EAAAC,EAAAC,cAAA,KAAG0J,UAAS,aAAAC,OAAe/J,EAAM8H,EAArB,KAAAiC,OAA0B/J,EAAMsD,EAAhC,MACRpD,EAAAC,EAAAC,cAAA,QAAQ0H,GAAI,EAAGxE,EAAG,EAAGK,MAAO3D,EAAM2D,MAAOC,OAAQ5D,EAAM4D,OAC/C+F,KAAK,uBACbzJ,EAAAC,EAAAC,cAAA,QAAQuD,MAAO3D,EAAM2D,MAAOC,OAAQ5D,EAAM4D,OAAQ+F,KAAML,EAChDzG,MAAO,CAACmH,YAAY,EAAGC,OAAO,gBACtC/J,EAAAC,EAAAC,cAAA,QAAQ0H,EAAG9H,EAAM2D,MAAQ,EAAGA,MAAO,EAAGC,OAAQ5D,EAAM4D,OAC5C+F,KAAM,aAAcO,YAAa,KACxCb,IAsGEc,EAjGA,SAACnK,GAEZ,IAAMoK,EAAgBpK,EAAMM,KACxB+J,EAAY,UACbrK,EAAMqK,YACLA,EAAY,WALM,IAAAC,EAOQC,mBAAS,CAAC,EAAE,IAPpBC,EAAAjL,OAAAkL,EAAA,EAAAlL,CAAA+K,EAAA,GAOfI,EAPeF,EAAA,GAONG,EAPMH,EAAA,GAQtBI,oBAAU,WACN,IAAMC,EAAQC,WAAW,WAClBJ,EAAQ,IACPC,EAAW,EAAED,EAAQ,GAAK,GAAGN,EAAcZ,OAAOkB,EAAQ,MAE/D,MACH,OAAO,kBAAMK,aAAaF,KAC3B,CAACH,EAASC,IAEVD,EAAQ,IAAM1K,EAAMM,KAAKkJ,SACxBkB,EAAQ,GAAK1K,EAAMM,KAAKkJ,OAAO,GAGnC,IAAIwB,EAAU,GAQd,OAFAA,GAJIA,EADe,QAAhBhL,EAAMiL,QACKb,EAAcM,EAAQ,IAAI,GAAGxH,KAAK,SAAC/C,EAAGgD,GAAJ,OAAUhD,EAAE+K,OAAO/H,EAAE+H,SAEvDd,EAAcM,EAAQ,IAAI,GAAGxH,KAAK,SAAC/C,EAAGgD,GAAJ,OAAUA,EAAE+H,OAAO/K,EAAE+K,UAEnDtI,MAAMwH,EAAcM,EAAQ,IAAI,GAAGlB,OAAOxJ,EAAMmL,eAG9DjL,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiL,SAAA,KACIlL,EAAAC,EAAAC,cAACiL,EAAA,EAAD,CACIC,aAAclC,EACdzF,MAAO,IACPC,OAAQ,IACRtD,KAAM0K,EACN1L,KAAMU,EAAMuL,MACZC,QAAQ,KACRC,QAAQ,KACRlL,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAChDoC,QAAS,GACTsH,UAAWA,EACXqB,OAAO,aAEPC,YAAa,CAAErJ,KAAM,QAASsJ,UAAW,CAAE,CAAE,SAAU,OACvD3K,QAAS,KACTC,UAAW,KACXC,WAAY,CACRE,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQxB,EAAM4B,MACdF,eAAgB,SAChBD,aAAc,IAElBoK,aAAa,EACbC,aAAa,EACbnK,SAAU,CACNN,SAAU,EACVC,YAAa,EACbC,aAAc,EACdG,eAAgB,SAChBD,cAAe,IAEnBsK,eAAgB,GAChBC,gBAAiB,GACjBC,eAAgB,CAAE3J,KAAM,QAASsJ,UAAW,CAAE,CAAE,SAAU,OAC1DM,SAAS,EACTC,gBAAiB,GACjBC,cAAe,KAInBlM,EAAAC,EAAAC,cAAA,MAAIyC,MAAO,CAAEyF,WAAY,GAAIsB,WAAY,IAAKhD,MAAO,OAAQzC,UAAU,WACnEjE,EAAAC,EAAAC,cAAA,UAAQyC,MAAO,CAAE+D,MAAO,QAASgD,WAAY,MAAQQ,EAAcM,EAAQ,IAAI,KAInFxK,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAKX,MAAO,CAACtC,OAAO,EAAGwC,QAAQ,EAAGW,WAAW,WACzCxD,EAAAC,EAAAC,cAACiM,EAAA,EAAD,CAAKC,QAAS,WAAK3B,EAAW,EAAED,EAAQ,GAAKA,EAAQ,GAAG,GAAGN,EAAcZ,OAAO,EAAEkB,EAAQ,MACtF6B,KAAK,SAASC,aAAW,MAAM3J,MAAO,CAACyF,WAAW,KACjD,CAACpI,EAAAC,EAAAC,cAACqM,EAAAtM,EAAD,MAAaD,EAAAC,EAAAC,cAACsM,EAAAvM,EAAD,OAAeuK,EAAQ,KAG1CxK,EAAAC,EAAAC,cAAC6I,EAAD,CAAc/C,MAAOwE,EAAQ,GACrB7H,MAAO,CAACc,MAAM,IAAK2E,WAAW,IAC9BqE,kBAAgB,kBAChBC,KAAM,EACNzF,SAAU,SAACtB,EAAOgH,GAAYlC,EAAW,CAACkC,EAASnC,EAAQ,MAC3DoC,OAAK,EACLhN,IAAK,EACLgB,IAAKsJ,EAAcZ,OAAO,OCnJ7BuD,cAEjB,SAAAA,EAAY/M,GAAM,IAAAuE,EAAA,OAAAhF,OAAAiF,EAAA,EAAAjF,CAAAQ,KAAAgN,IACdxI,EAAAhF,OAAAkF,EAAA,EAAAlF,CAAAQ,KAAAR,OAAAmF,EAAA,EAAAnF,CAAAwN,GAAApI,KAAA5E,KAAMC,KACD4E,QAAU,CACXC,SAAkB,OAClBC,SAAkB,GAClBC,WAAkB,GAClB/D,SAAkB,EAClBgE,aAAkB,GAClBgI,cAAkB,GAClB/B,QAAkB,MAClBE,cAAkB,GAGtB5G,EAAKjE,KAAqB,GAC1BiE,EAAKU,YAAsB,EAC3BV,EAAKO,SAAqB,GAC1BP,EAAKM,SAAqB,OAC1BN,EAAKW,cAAqB,GAC1BX,EAAKY,cAAqB,GAC1BZ,EAAKa,gBAAqB,GAE1Bb,EAAK/C,OAAqB,GAC1B+C,EAAKxC,OAAqB,GAC1BwC,EAAKc,aAAqB,GAC1Bd,EAAKe,eAAqB,GAC1Bf,EAAKgB,iBAAqB,EAC1BhB,EAAKiB,eAAqB,GAE1BjB,EAAKkB,YAAqBlB,EAAKkB,YAAYC,KAAjBnG,OAAAoG,EAAA,EAAApG,CAAAgF,IAC1BA,EAAKqB,SAAqBrB,EAAKqB,SAASF,KAAdnG,OAAAoG,EAAA,EAAApG,CAAAgF,IA7BZA,wEAkCTsB,EAAOC,GACZ/F,KAAK6E,QAAQI,aAAaa,EAAME,OAAOC,MAAQF,EAC/C/F,KAAKwF,iBAAkB,EACvBxF,KAAKkG,SAAS,wCAGNJ,GACG,YAARA,EACC9F,KAAK6E,QAAQ5D,SAAWjB,KAAK6E,QAAQ5D,SAErCjB,KAAK6E,QAAQiB,EAAME,OAAOC,MAAQH,EAAME,OAAOG,MACxB,eAApBL,EAAME,OAAOC,OACZjG,KAAKwF,iBAAkB,IAG/BxF,KAAKkG,SAAS,qCAMV,IAAAE,EAAApG,KAIAqG,EAAK,EACL3C,EAAM,GAGNwB,EAAkBlF,KAAKC,MAAMiF,WAC7BjE,EAAkBjB,KAAK6E,QAAL,QAClBC,EAAkB9E,KAAK6E,QAAL,SAClBE,EAAkB/E,KAAK6E,QAAL,SAClBG,EAAkBhF,KAAK6E,QAAL,WAClBuG,EAAkBpL,KAAK6E,QAAL,cAClBqG,EAAkBlL,KAAK6E,QAAL,QAGtB,GAAG7E,KAAKkF,aAAeA,EAAW,CAQ9B,IAAIxB,KALJ1D,KAAKkF,WAAaA,EAClBlF,KAAKO,KAAO+F,OAAQ,KAAapB,EAAWqB,WAAa,aAGzDvG,KAAKmF,cAAgB,GACVnF,KAAKO,KACZP,KAAKmF,cAAcqB,KACfrG,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAU/C,IAAKA,EAAKyC,MAAOzC,GAAMA,IAKzCqB,EAAYvF,OAAOD,KAAKS,KAAKO,MAAM,GACnCP,KAAK6E,QAAL,SAA2BE,EAI/B,GAAG/E,KAAK+E,WAAaA,GAAY/E,KAAKkF,aAAeA,EAAW,CAE5D,IAAIwB,EAAsB1G,KAAKO,KAAKwE,GAAV,MACtB4B,EAAsB3G,KAAKO,KAAKwE,GAAV,WAS1B,IAAIrB,KAPJ1D,KAAK6E,QAAL,SAA8B,OAC9B7E,KAAK6E,QAAL,WAA8B,GAC9BC,EAA8B,OAC9BE,EAA8B,GAG9BhF,KAAKoF,cAAgB,GACVsB,EACP1G,KAAKoF,cAAcoB,KACfrG,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAU/C,IAAKA,EAAKyC,MAAOzC,GAAMA,IAOzC,IAAIA,KADJ1D,KAAKqF,gBAAkB,GACZsB,EACP3G,KAAKqF,gBAAgBmB,KACjBrG,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAU/C,IAAKA,EAAKyC,MAAOzC,GAAMA,IAQzC,IAAIA,KAHJ1D,KAAKwF,iBAAkB,EACvBxF,KAAK6E,QAAL,aAA+B,GAC/BwB,EAAK,EACMrG,KAAKO,KAAKwE,GAAV,KACP/E,KAAK6E,QAAL,aAA6BnB,GAAQ2C,IAhI7B,GAqIZ,IAAI3C,KADJ1D,KAAK6E,QAAQoI,cAAgB,GAClBjN,KAAKO,KAAKwE,GAAV,MACP/E,KAAK6E,QAAQoI,cAAczG,KAAKxG,KAAKO,KAAKwE,GAAV,MAA6BrB,IAQrE,GAAG1D,KAAKwF,iBAAmBxF,KAAK8E,WAAaA,GACzC9E,KAAK+E,WAAaA,GAAY/E,KAAKkF,aAAeA,EAAW,CAE7DlF,KAAKyB,OAAa,GAClBzB,KAAKgC,OAAa,GAClB,IAAI4E,EAAc5G,KAAKO,KAAKwE,GAAV,MAA6BD,GAE/C,IAAIpB,KAAOkD,EAAU,CACjB,IAAIC,EAAQD,EAAUlD,GAAV,MACRoD,EAAgBC,YAAW,CACvBC,KAAM,CACFH,MAAOA,IAFCE,CAIb,SAAA9G,GAAK,OAAIE,EAAAC,EAAAC,cAAC4G,EAAA,EAADzH,OAAA0H,OAAA,CAAUL,MAAM,WAAc5G,MAG9C,QAA+BkH,IAA5BP,EAAUlD,GAAV,QACC1D,KAAKgC,OAAO0B,GAAOmD,EACnB7G,KAAKyB,OAAO+E,KACRrG,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAKC,IAAKA,EAAKZ,MAAO,CAACtC,OAAO,IAAKmD,WAAW,WAC1CxD,EAAAC,EAAAC,cAACyG,EAAD,CACIb,KAAMvC,EACNqC,QAAS/F,KAAK6E,QAAQI,aAAavB,GACnC0D,SAAUpH,KAAK6F,SACfM,MAAM,aAEVhG,EAAAC,EAAAC,cAAA,OAAKyC,MAAO,CAACoB,SAAS,OAAOmD,SAAU,eAAgB3D,SAK/D,CAEA,IAAI4D,EAAa,GACjB,IAAI,IAAIC,KAAUX,EAAUlD,GAAV,QACd1D,KAAKgC,OAAO4E,EAAUlD,GAAV,QAA0B6D,IAAWV,EACjDS,EAAWd,KACPrG,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAKC,IAAKkD,EAAUlD,GAAV,QAA0B6D,GAASzE,MAAO,CAACtC,OAAO,IAAKmD,WAAW,WACxExD,EAAAC,EAAAC,cAACyG,EAAD,CACIb,KAAMW,EAAUlD,GAAV,QAA0B6D,GAChCxB,QAAS/F,KAAK6E,QAAQI,aAAa2B,EAAUlD,GAAV,QAA0B6D,IAC7DH,SAAUpH,KAAK6F,SACfM,MAAM,aAEVhG,EAAAC,EAAAC,cAAA,OAAKyC,MAAO,CAACc,MAAM,OAAOyD,SAAU,eAC/BT,EAAUlD,GAAV,QAA0B6D,MAM3CvH,KAAKyB,OAAO+E,KACRrG,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAKC,IAAKA,EAAKZ,MAAO,CAACtC,OAAO,IAAKmD,WAAW,WAC1CxD,EAAAC,EAAAC,cAAA,OAAKyC,MAAO,CAACuE,SAAU,aAAazD,MAAM,SAAUF,GACnD4D,KAKjBtH,KAAKwF,iBAAkB,EAI3B,GAAGxF,KAAKwF,gBAAgB,CACpBxF,KAAKuF,eAAiB,GACtBvF,KAAKsF,aAAiB,GACtB,IAAIkC,EAAcxH,KAAKO,KAAKwE,GAAV,MAElB,IAAIrB,KAAO8D,EACPxH,KAAKsF,aAAakC,EAAY9D,IAAQ,CAACA,EAAI,IAI/C,IAAIA,KAAO1D,KAAK6E,QAAQI,aACpB,GAAGjF,KAAK6E,QAAQI,aAAavB,GAAK,CAC9B,IAAI+D,EAAUzH,KAAKO,KAAKwE,GAAV,KAA4BrB,GAG1C,IAAI,IAAIiE,KAAUF,EAAQ,CAEtB,IAAIC,EAAkB,CAClB1I,GAAO0E,GAGPmE,EAAkBL,EAAYG,GAC9BuF,EAAkB,EAClBpF,EAAkB,EAKtB,IAAI,IAAIqF,IAJU,KAAfnI,IACC8C,EAAe9H,KAAKO,KAAKwE,GAAV,WAAkCC,GAAYtB,GAAKiE,IAGtDF,EAAQE,GACpBD,EAAgByF,GAAQ1F,EAAQE,GAAQwF,GAAQrF,EAChDoF,GAASxF,EAAgByF,GAG7BzF,EAAe,OAAewF,EAC9BxF,EAAe,SAA8B,SAAd5C,EAC/B4C,EAAe,OAAe1H,KAAKgC,OAAO0B,GAE1C1D,KAAKsF,aAAauC,GAAS,GAAGrB,KAAKkB,KAYnD,OALA1H,KAAKkF,WAAqBA,EAC1BlF,KAAK+E,SAAqBA,EAC1B/E,KAAK8E,SAAqBA,EAC1B9E,KAAKwF,iBAAqB,EAGlBrF,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAKX,MAAO,CAACe,OAAO,QAAQD,MAAM,OAAQpD,OAAO,IAAKwC,QAAQ,MAG1D7C,EAAAC,EAAAC,cAAA,OAAKyC,MAAO,CAACc,MAAM,QACdzD,EAAAC,EAAAC,cAAC+M,EAAD,CACO7M,KAAmBP,KAAKsF,aACxBgF,UAAmBrJ,EACnBY,MAAmB7B,KAAKO,KAAKwE,GAAUlD,MACvC2J,MAAmBxL,KAAK6E,QAAQoI,cAChC7B,cAAmBA,EACnBF,QAAmBA,KAK/B/K,EAAAC,EAAAC,cAAA,OAAKyC,MAAO,CAACc,MAAM,MAAOZ,QAAQ,KAAMiF,UAAW,WAG/C9H,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAKX,MAAO,CAACoF,QAAQ,OAAOC,YAAY,MAAOC,aAAc,OACzDjI,EAAAC,EAAAC,cAACgI,EAAAjI,EAAD,CAAQkI,QAAc,UACdvC,QAAe9E,EACfmG,SAAe,WAAOhB,EAAKV,YAAY,YACvCS,MAAelF,IACvBd,EAAAC,EAAAC,cAAA,OAAKyC,MAAO,CAACyF,WAAW,KAAMC,WAAW,YAAzC,YAEJrI,EAAAC,EAAAC,cAAA,WAGAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoI,EAAA,EAAD,CAAYC,QAAM,EAACC,QAAQ,8BAA3B,YAGAxI,EAAAC,EAAAC,cAACuI,EAAA,EAAD,CACI9F,MAAe,CAACc,MAAM,QACtBuC,MAAepB,EACfqC,SAAepH,KAAK0F,YACpBmD,MAAe1I,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAO7C,KAAK,WAAWjH,GAAG,+BACzCiH,KAAc,WACd8C,cAAY,GAEX/I,KAAKmF,gBAGdhF,EAAAC,EAAAC,cAAA,WAGAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoI,EAAA,EAAD,CAAYC,QAAM,EAACC,QAAQ,+BAA3B,aAGAxI,EAAAC,EAAAC,cAACuI,EAAA,EAAD,CACI9F,MAAe,CAACc,MAAM,QACtBuC,MAAenB,EACfoC,SAAepH,KAAK0F,YACpBmD,MAAe1I,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAO7C,KAAK,aAAajH,GAAG,gCAC3CiH,KAAc,aACd8C,cAAY,GAEZ5I,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAUN,MAAO,IAAjB,QACCnG,KAAKqF,kBAGdlF,EAAAC,EAAAC,cAAA,WAGAF,EAAAC,EAAAC,cAAA,OAAKyC,MAAO,CAACc,MAAM,SACfzD,EAAAC,EAAAC,cAACoI,EAAA,EAAD,CAAYC,QAAM,EAACC,QAAQ,6BAA3B,WAGAxI,EAAAC,EAAAC,cAACuI,EAAA,EAAD,CACI9F,MAAe,CAACc,MAAM,OACtBuC,MAAe+E,EACf9D,SAAepH,KAAK0F,YACpBmD,MAAe1I,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAO7C,KAAK,UAAUjH,GAAG,8BACxCiH,KAAc,UACd8C,cAAY,GAEZ5I,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAUN,MAAO,OAAjB,OACAhG,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAUN,MAAO,UAAjB,WAEJhG,EAAAC,EAAAC,cAACuI,EAAA,EAAD,CACI9F,MAAe,CAACc,MAAM,MAAM2E,WAAW,MACvCpC,MAAeiF,EACfhE,SAAepH,KAAK0F,YACpBmD,MAAe1I,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAO7C,KAAK,gBAAgBjH,GAAG,oCAC9CiH,KAAc,gBACd8C,cAAY,GAEZ5I,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAUN,MAAO,GAAjB,KACAhG,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAUN,MAAO,GAAjB,KACAhG,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAUN,MAAO,GAAjB,KACAhG,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAUN,MAAO,GAAjB,OAGRhG,EAAAC,EAAAC,cAAA,WAGAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoI,EAAA,EAAD,CAAYC,QAAM,EAACC,QAAQ,gCAA3B,cAGAxI,EAAAC,EAAAC,cAACuI,EAAA,EAAD,CACI9F,MAAe,CAACc,MAAM,QACtBuC,MAAerB,EACfsC,SAAepH,KAAK0F,YACpBmD,MAAe1I,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAO7C,KAAK,aAAajH,GAAG,iCAC3CiH,KAAc,WACd8C,cAAY,GAEX/I,KAAKoF,gBAGdjF,EAAAC,EAAAC,cAAA,WAGAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKyC,MAAO,CACAoF,QAAkB,eAClBtE,MAAkB,OAClBK,SAAkB,OAClB+E,WAAkB,SAClBC,aAAkB,MAClBT,WAAkB,YAEzBxI,KAAKyB,kBAzXA6C,sBCFhC4E,EAAenC,YAPN,CACXoC,KAAM,CACFvF,MAAM,MACNC,OAAO,MACPC,gBAAgB,SAGHiD,CAAmBqC,KAgFzBiE,EA9EC,SAACpN,GAEb,IAAMoK,EAAgBpK,EAAMoK,cAFLE,EAGOC,mBAAS,CAAC,EAAE,IAHnBC,EAAAjL,OAAAkL,EAAA,EAAAlL,CAAA+K,EAAA,GAGhBI,EAHgBF,EAAA,GAGPG,EAHOH,EAAA,GAiBvB,OAbAI,oBAAU,WACN,IAAMC,EAAQC,WAAW,WAClBJ,EAAQ,IACPC,EAAW,EAAED,EAAQ,GAAK,GAAGN,EAAcZ,OAAOkB,EAAQ,MAE/D,MACH,OAAO,kBAAMK,aAAaF,KAC3B,CAACH,EAASC,IAEVD,EAAQ,IAAM1K,EAAMoK,cAAcZ,SACjCkB,EAAQ,GAAK1K,EAAMoK,cAAcZ,OAAO,GAIxCtJ,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiL,SAAA,KAEIlL,EAAAC,EAAAC,cAAA,OAAKyC,MAAO,CAACc,MAAM,OAAOC,OAAO,UAC7B1D,EAAAC,EAAAC,cAACiN,EAAA,EAAD,CACI/M,KAAM8J,EAAcM,EAAQ,IAAI,GAChCjI,SAAS,EACTlC,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAChDC,OAAQ,CAAEC,KAAM,SAAUf,IAAK,OAAQgB,IAAK,QAE5CC,OAAQ,CAAEF,KAAM,SAAUf,IAAK,OAAQgB,IAAK,QAE5CwM,UAAU,WACVrM,QAAS,KACTC,UAAW,KACXC,WAAY,CACRC,OAAQ,SACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQxB,EAAMuN,OACd7L,eAAgB,SAChBD,aAAc,IAElBE,SAAU,CACNP,OAAQ,OACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQxB,EAAMwN,OACd9L,eAAgB,SAChBD,cAAe,OAM3BvB,EAAAC,EAAAC,cAAA,MAAIyC,MAAO,CAAEyF,WAAY,GAAIsB,WAAY,IAAKhD,MAAO,OAAQzC,UAAU,WACnEjE,EAAAC,EAAAC,cAAA,UAAQyC,MAAO,CAAE+D,MAAO,QAASgD,WAAY,MAAQQ,EAAcM,EAAQ,IAAI,KAInFxK,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAKX,MAAO,CAACtC,OAAO,EAAGwC,QAAQ,EAAGW,WAAW,WACzCxD,EAAAC,EAAAC,cAACiM,EAAA,EAAD,CAAKC,QAAS,WAAK3B,EAAW,EAAED,EAAQ,GAAKA,EAAQ,GAAG,GAAGN,EAAcZ,OAAO,EAAEkB,EAAQ,MACtF6B,KAAK,SAASC,aAAW,MAAM3J,MAAO,CAACyF,WAAW,KACjD,CAACpI,EAAAC,EAAAC,cAACqM,EAAAtM,EAAD,MAAaD,EAAAC,EAAAC,cAACsM,EAAAvM,EAAD,OAAeuK,EAAQ,KAG1CxK,EAAAC,EAAAC,cAACqN,EAAD,CAAcvH,MAAOwE,EAAQ,GACrB7H,MAAO,CAACc,MAAM,IAAK2E,WAAW,IAC9BqE,kBAAgB,kBAChBC,KAAM,EACNzF,SAAU,SAACtB,EAAOgH,GAAYlC,EAAW,CAACkC,EAASnC,EAAQ,MAC3DoC,OAAK,EACLhN,IAAK,EACLgB,IAAKsJ,EAAcZ,OAAO,OCzE7BkE,cAEjB,SAAAA,EAAY1N,GAAM,IAAAuE,EAAA,OAAAhF,OAAAiF,EAAA,EAAAjF,CAAAQ,KAAA2N,IACdnJ,EAAAhF,OAAAkF,EAAA,EAAAlF,CAAAQ,KAAAR,OAAAmF,EAAA,EAAAnF,CAAAmO,GAAA/I,KAAA5E,KAAMC,KACD4E,QAAU,CACXC,SAAkB,OAClBC,SAAkB,GAClB6I,UAAkB,GAClBC,UAAkB,GAClBC,YAAkB,GAClB9I,WAAkB,GAClBC,aAAkB,IAGtBT,EAAKjE,KAAqB,GAC1BiE,EAAKU,YAAsB,EAC3BV,EAAKO,SAAqB,GAC1BP,EAAKoJ,UAAqB,GAC1BpJ,EAAKqJ,UAAqB,GAC1BrJ,EAAKM,SAAqB,OAC1BN,EAAKW,cAAqB,GAC1BX,EAAKuJ,gBAAqB,GAC1BvJ,EAAKY,cAAqB,GAC1BZ,EAAKa,gBAAqB,GAE1Bb,EAAK/C,OAAqB,GAC1B+C,EAAKxC,OAAqB,GAC1BwC,EAAKc,aAAqB,GAC1Bd,EAAKe,eAAqB,GAC1Bf,EAAKgB,iBAAqB,EAC1BhB,EAAKiB,eAAqB,GAE1BjB,EAAKkB,YAAqBlB,EAAKkB,YAAYC,KAAjBnG,OAAAoG,EAAA,EAAApG,CAAAgF,IAC1BA,EAAKqB,SAAqBrB,EAAKqB,SAASF,KAAdnG,OAAAoG,EAAA,EAAApG,CAAAgF,IA/BZA,wEAoCTsB,EAAOC,GACZ/F,KAAK6E,QAAQI,aAAaa,EAAME,OAAOC,MAAQF,EAC/C/F,KAAKwF,iBAAkB,EACvBxF,KAAKkG,SAAS,wCAGNJ,GACR9F,KAAK6E,QAAQiB,EAAME,OAAOC,MAAQH,EAAME,OAAOG,MACxB,eAApBL,EAAME,OAAOC,MAAyC,gBAApBH,EAAME,OAAOC,OAAsBjG,KAAKwF,iBAAkB,GAC/FxF,KAAKkG,SAAS,qCASd,IAAI8H,EAAI,EACJ3H,EAAK,EACL3C,EAAM,GAGNwB,EAAkBlF,KAAKC,MAAMiF,WAC7BJ,EAAkB9E,KAAK6E,QAAL,SAClBE,EAAkB/E,KAAK6E,QAAL,SAClB+I,EAAkB5N,KAAK6E,QAAL,UAClBgJ,EAAkB7N,KAAK6E,QAAL,UAClBiJ,EAAkB9N,KAAK6E,QAAL,YAClBG,EAAkBhF,KAAK6E,QAAL,WAGtB,GAAG7E,KAAKkF,aAAeA,EAAW,CAQ9B,IAAIxB,KALJ1D,KAAKkF,WAAaA,EAClBlF,KAAKO,KAAO+F,OAAQ,KAAapB,EAAWqB,WAAa,iBAGzDvG,KAAKmF,cAAgB,GACVnF,KAAKO,KACZP,KAAKmF,cAAcqB,KACfrG,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAU/C,IAAKA,EAAKyC,MAAOzC,GAAMA,IAKzCqB,EAAYvF,OAAOD,KAAKS,KAAKO,MAAM,GACnCP,KAAK6E,QAAL,SAA4BE,EAKhC,GAAG/E,KAAK+E,WAAaA,GAAa/E,KAAKkF,aAAeA,EAAW,CAG7DlF,KAAK+N,gBAAkB,GACvB,IAAIE,EAAU,GACd,IAAID,KAAKhO,KAAKO,KAAKwE,GAAV,MACLrB,EAAM1D,KAAKO,KAAKwE,GAAV,MAA6BiJ,GACnCC,EAAQzH,KAAK9C,GACb1D,KAAK+N,gBAAgBvH,KACjBrG,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAU/C,IAAKA,EAAKyC,MAAOzC,GAAMA,IAIzCkK,EAAaK,EAAQ,GACrBJ,EAAaI,EAAQ,GAClBA,EAAQxE,OAAS,IAAGoE,EAAaI,EAAQ,IAC5CjO,KAAK6E,QAAL,UAA4B+I,EAC5B5N,KAAK6E,QAAL,UAA4BgJ,EAE5B,IAAInH,EAAsB1G,KAAKO,KAAKwE,GAAV,MACtB4B,EAAsB3G,KAAKO,KAAKwE,GAAV,WAW1B,IAAIrB,KATJ1D,KAAK6E,QAAL,SAA8B,OAC9B7E,KAAK6E,QAAL,YAA8B,GAC9B7E,KAAK6E,QAAL,WAA8B,GAC9BC,EAA8B,OAC9BgJ,EAA8B,GAC9B9I,EAA8B,GAG9BhF,KAAKoF,cAAgB,GACVsB,EACP1G,KAAKoF,cAAcoB,KACfrG,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAU/C,IAAKA,EAAKyC,MAAOzC,GAAMA,IAOzC,IAAIA,KADJ1D,KAAKqF,gBAAkB,GACZsB,EACP3G,KAAKqF,gBAAgBmB,KACjBrG,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAU/C,IAAKA,EAAKyC,MAAOzC,GAAMA,IAQzC,IAAIA,KAHJ1D,KAAKwF,iBAAkB,EACvBxF,KAAK6E,QAAL,aAA+B,GAC/BwB,EAAK,EACMrG,KAAKO,KAAKwE,GAAV,KACP/E,KAAK6E,QAAL,aAA6BnB,GAAQ2C,IAhJ7B,GAqJZ,IAAI3C,KADJ1D,KAAK6E,QAAQoI,cAAgB,GAClBjN,KAAKO,KAAKwE,GAAV,MACP/E,KAAK6E,QAAQoI,cAAczG,KAAKxG,KAAKO,KAAKwE,GAAV,MAA6BrB,IAQrE,GAAG1D,KAAKwF,iBAAmBxF,KAAK8E,WAAaA,GACzC9E,KAAK+E,WAAaA,GAAY/E,KAAKkF,aAAeA,EAAW,CAE7DlF,KAAKyB,OAAa,GAClBzB,KAAKgC,OAAa,GAClB,IAAI4E,EAAc5G,KAAKO,KAAKwE,GAAV,MAA6BD,GAE/C,IAAIpB,KAAOkD,EAAU,CACjB,IAAIC,EAAQD,EAAUlD,GAAV,MACRoD,EAAgBC,YAAW,CACvBC,KAAM,CACFH,MAAOA,IAFCE,CAIb,SAAA9G,GAAK,OAAIE,EAAAC,EAAAC,cAAC4G,EAAA,EAADzH,OAAA0H,OAAA,CAAUL,MAAM,WAAc5G,MAG9C,QAA+BkH,IAA5BP,EAAUlD,GAAV,QACC1D,KAAKgC,OAAO0B,GAAOmD,EACnB7G,KAAKyB,OAAO+E,KACRrG,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAKC,IAAKA,EAAKZ,MAAO,CAACtC,OAAO,IAAKmD,WAAW,WAC1CxD,EAAAC,EAAAC,cAACyG,EAAD,CACIb,KAAMvC,EACNqC,QAAS/F,KAAK6E,QAAQI,aAAavB,GACnC0D,SAAUpH,KAAK6F,SACfM,MAAM,aAEVhG,EAAAC,EAAAC,cAAA,OAAKyC,MAAO,CAACoB,SAAS,OAAOmD,SAAU,eAAgB3D,SAK/D,CAEA,IAAI4D,EAAa,GACjB,IAAI,IAAIC,KAAUX,EAAUlD,GAAV,QACd1D,KAAKgC,OAAO4E,EAAUlD,GAAV,QAA0B6D,IAAWV,EACjDS,EAAWd,KACPrG,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAKC,IAAKkD,EAAUlD,GAAV,QAA0B6D,GAASzE,MAAO,CAACtC,OAAO,IAAKmD,WAAW,WACxExD,EAAAC,EAAAC,cAACyG,EAAD,CACIb,KAAMW,EAAUlD,GAAV,QAA0B6D,GAChCxB,QAAS/F,KAAK6E,QAAQI,aAAa2B,EAAUlD,GAAV,QAA0B6D,IAC7DH,SAAUpH,KAAK6F,SACfM,MAAM,aAEVhG,EAAAC,EAAAC,cAAA,OAAKyC,MAAO,CAACc,MAAM,OAAOyD,SAAU,eAC/BT,EAAUlD,GAAV,QAA0B6D,MAM3CvH,KAAKyB,OAAO+E,KACRrG,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAKC,IAAKA,EAAKZ,MAAO,CAACtC,OAAO,IAAKmD,WAAW,WAC1CxD,EAAAC,EAAAC,cAAA,OAAKyC,MAAO,CAACuE,SAAU,aAAazD,MAAM,SAAUF,GACnD4D,KAKjBtH,KAAKwF,iBAAkB,EAI3B,GAAGxF,KAAKwF,iBAAmBxF,KAAK4N,YAAcA,GAAa5N,KAAK6N,YAAcA,EAAU,CACpF7N,KAAKsF,aAAiB,GACtBtF,KAAKuF,eAAiB,GACtB,IAAIiC,EAAcxH,KAAKO,KAAKwE,GAAV,MAElB,IAAIrB,KAAO8D,EACPxH,KAAKsF,aAAakC,EAAY9D,IAAQ,CAACA,EAAI,IAI/C,IAAIA,KAAO1D,KAAK6E,QAAQI,aACpB,GAAGjF,KAAK6E,QAAQI,aAAavB,GAAK,CAC9B,IAAI+D,EAAUzH,KAAKO,KAAKwE,GAAV,KAA4BrB,GAG1C,IAAI,IAAIiE,KAAUF,EAAQ,CAEtB,IAAIC,EAAkB,CAACnH,KAAK,GAAGvB,GAAG0E,GAC9BmE,EAAkBL,EAAYG,GAC9BuG,EAAkB,EAClBpG,EAAkB,EAEH,KAAhBgG,IACCI,EAAgBlO,KAAKO,KAAKwE,GAAV,WAAkC+I,GAAapK,GAAKiE,IAEtD,KAAf3C,IACC8C,EAAgB9H,KAAKO,KAAKwE,GAAV,WAAkCC,GAAYtB,GAAKiE,IAGvED,EAAe,KAASlB,KAAM,CAC1BuB,EAAKN,EAAQE,GAAQiG,GAAWM,EAChC3K,EAAKkE,EAAQE,GAAQkG,GAAW/F,IAEpC9H,KAAKsF,aAAauC,GAAS,GAAGrB,KAAKkB,GAGvC1H,KAAKuF,eAAeiB,KAAKxG,KAAKgC,OAAO0B,KAYjD,OAPA1D,KAAKkF,WAAqBA,EAC1BlF,KAAK+E,SAAqBA,EAC1B/E,KAAK4N,UAAqBA,EAC1B5N,KAAK6N,UAAqBA,EAC1B7N,KAAK8E,SAAqBA,EAC1B9E,KAAKwF,iBAAqB,EAGlBrF,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAKX,MAAO,CAACc,MAAM,OAAQpD,OAAO,IAAKwC,QAAQ,MAG3C7C,EAAAC,EAAAC,cAAA,OAAKyC,MAAO,CAACe,OAAO,QAASD,MAAM,QAC9BzD,EAAAC,EAAAC,cAAC8N,EAAD,CACOX,OAAQI,EACRH,OAAQI,EACRxD,cAAerK,KAAKsF,gBAKhCnF,EAAAC,EAAAC,cAAA,OAAKyC,MAAO,CAACe,OAAO,QAASD,MAAM,MAAOZ,QAAQ,KAAMiF,UAAW,WAG/D9H,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoI,EAAA,EAAD,CAAYC,QAAM,EAACC,QAAQ,8BAA3B,QAGAxI,EAAAC,EAAAC,cAACuI,EAAA,EAAD,CACI9F,MAAe,CAACc,MAAM,QACtBuC,MAAepB,EACfqC,SAAepH,KAAK0F,YACpBmD,MAAe1I,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAO7C,KAAK,WAAWjH,GAAG,+BACzCiH,KAAc,WACd8C,cAAY,GAEX/I,KAAKmF,gBAGdhF,EAAAC,EAAAC,cAAA,WAGAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoI,EAAA,EAAD,CAAYC,QAAM,EAACC,QAAQ,+BAA3B,YAGAxI,EAAAC,EAAAC,cAACuI,EAAA,EAAD,CACI9F,MAAe,CAACc,MAAM,QACtBuC,MAAeyH,EACfxG,SAAepH,KAAK0F,YACpBmD,MAAe1I,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAO7C,KAAK,YAAYjH,GAAG,gCAC1CiH,KAAc,YACd8C,cAAY,GAEX/I,KAAK+N,kBAGd5N,EAAAC,EAAAC,cAAA,WAGAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoI,EAAA,EAAD,CAAYC,QAAM,EAACC,QAAQ,gCAA3B,gBAGAxI,EAAAC,EAAAC,cAACuI,EAAA,EAAD,CACI9F,MAAe,CAACc,MAAM,QACtBuC,MAAe2H,EACf1G,SAAepH,KAAK0F,YACpBmD,MAAe1I,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAO7C,KAAK,cAAcjH,GAAG,iCAC5CiH,KAAc,cACd8C,cAAY,GAEZ5I,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAUN,MAAO,IAAjB,QACCnG,KAAKqF,kBAGdlF,EAAAC,EAAAC,cAAA,WAGAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoI,EAAA,EAAD,CAAYC,QAAM,EAACC,QAAQ,+BAA3B,YAGAxI,EAAAC,EAAAC,cAACuI,EAAA,EAAD,CACI9F,MAAe,CAACc,MAAM,QACtBuC,MAAe0H,EACfzG,SAAepH,KAAK0F,YACpBmD,MAAe1I,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAO7C,KAAK,YAAYjH,GAAG,gCAC1CiH,KAAc,YACd8C,cAAY,GAEX/I,KAAK+N,kBAGd5N,EAAAC,EAAAC,cAAA,WAGAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoI,EAAA,EAAD,CAAYC,QAAM,EAACC,QAAQ,+BAA3B,gBAGAxI,EAAAC,EAAAC,cAACuI,EAAA,EAAD,CACI9F,MAAe,CAACc,MAAM,QACtBuC,MAAenB,EACfoC,SAAepH,KAAK0F,YACpBmD,MAAe1I,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAO7C,KAAK,aAAajH,GAAG,gCAC3CiH,KAAc,aACd8C,cAAY,GAEZ5I,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAUN,MAAO,IAAjB,QACCnG,KAAKqF,kBAGdlF,EAAAC,EAAAC,cAAA,WAGAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoI,EAAA,EAAD,CAAYC,QAAM,EAACC,QAAQ,gCAA3B,cAGAxI,EAAAC,EAAAC,cAACuI,EAAA,EAAD,CACI9F,MAAe,CAACc,MAAM,QACtBuC,MAAerB,EACfsC,SAAepH,KAAK0F,YACpBmD,MAAe1I,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAO7C,KAAK,aAAajH,GAAG,iCAC3CiH,KAAc,WACd8C,cAAY,GAEX/I,KAAKoF,gBAGdjF,EAAAC,EAAAC,cAAA,WAGAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKyC,MAAO,CACAoF,QAAkB,eAClBtE,MAAkB,OAClBK,SAAkB,OAClB+E,WAAkB,SAClBC,aAAkB,MAClBT,WAAkB,YAEzBxI,KAAKyB,kBAlZI6C,qFCNpC8J,GAAa,CAAC,OAAQ,MAAO,UAAW,OACxCC,GAAa,CAAClO,EAAAC,EAAAC,cAACiO,EAAAlO,EAAD,MAAaD,EAAAC,EAAAC,cAACkO,EAAAnO,EAAD,MAAYD,EAAAC,EAAAC,cAACmO,EAAApO,EAAD,MAAgBD,EAAAC,EAAAC,cAACoO,EAAArO,EAAD,OAExCsO,eAEjB,SAAAA,EAAYzO,GAAM,IAAAuE,EAOd,IAAI,IAAIwJ,KAPMxO,OAAAiF,EAAA,EAAAjF,CAAAQ,KAAA0O,IACdlK,EAAAhF,OAAAkF,EAAA,EAAAlF,CAAAQ,KAAAR,OAAAmF,EAAA,EAAAnF,CAAAkP,GAAA9J,KAAA5E,KAAMC,KACD0O,MAAiB,CAACC,WAAW,GAClCpK,EAAKqK,eAAiBrK,EAAKqK,eAAelJ,KAApBnG,OAAAoG,EAAA,EAAApG,CAAAgF,IACtBA,EAAKsK,UAAiB,GACtBtK,EAAKuK,MAAiB5O,EAAAC,EAAAC,cAAC2O,EAAD,CAAW9J,WAAYV,EAAKvE,MAAMiF,aAE3CkJ,GACT5J,EAAKsK,UAAUtI,KAAKrG,EAAAC,EAAAC,cAAC4O,EAAA,EAAD,CAAKvL,IAAK0K,GAAWJ,GAAIkB,MAAOd,GAAWJ,GAAImB,KAAMd,GAAWL,MAR1E,OAAAxJ,8EAaHsB,EAAOgH,GAClB9M,KAAK+O,MAAQ,CACT5O,EAAAC,EAAAC,cAAC2O,EAAD,CAAW9J,WAAYlF,KAAKC,MAAMiF,aAClC/E,EAAAC,EAAAC,cAAC+O,EAAD,CAAUlK,WAAYlF,KAAKC,MAAMiF,aACjC/E,EAAAC,EAAAC,cAACgP,EAAD,CAAcnK,WAAYlF,KAAKC,MAAMiF,aACrC/E,EAAAC,EAAAC,cAAC2O,EAAD,CAAW9J,WAAYlF,KAAKC,MAAMiF,cACpC4H,GACF9M,KAAKkG,SAAS,CAAC0I,WAAY9B,qCAK3B,OACI3M,EAAAC,EAAAC,cAAA,OAAKyC,MAAO,CACRwM,SAAU,EACV1L,MAAO,SAGPzD,EAAAC,EAAAC,cAACkP,EAAA,EAAD,CAAQC,SAAS,UACbrP,EAAAC,EAAAC,cAACoP,EAAA,EAAD,CACIC,kBAAuB,CAAC5M,MAAO,CAACgB,gBAAiB,UACjDqC,MAAuBnG,KAAK2O,MAAMC,WAClCxH,SAAuBpH,KAAK6O,eAC5Bc,QAAsB,aACtBC,cAAsB,KACtBC,eAAsB,UACtBC,UAAsB,UACtBhN,MAAuB,CAACC,WAAW,SAEtC/C,KAAK8O,YAGL9O,KAAK+O,MACV5O,EAAAC,EAAAC,cAAA,mBAhDmBiE,aCRdyL,eAEjB,SAAAA,EAAY9P,GAAM,IAAAuE,EAMd,IAAI,IAAIwJ,KANMxO,OAAAiF,EAAA,EAAAjF,CAAAQ,KAAA+P,IACdvL,EAAAhF,OAAAkF,EAAA,EAAAlF,CAAAQ,KAAAR,OAAAmF,EAAA,EAAAnF,CAAAuQ,GAAAnL,KAAA5E,KAAMC,KACD0O,MAAQ,CAACzJ,WAAY,GAC1BV,EAAKwL,aAAexL,EAAKwL,aAAarK,KAAlBnG,OAAAoG,EAAA,EAAApG,CAAAgF,IAEpBA,EAAKyL,KAAO,GACCC,EACT1L,EAAKyL,KAAKzJ,KACNrG,EAAAC,EAAAC,cAAC4O,EAAA,EAAD,CAAKvL,IAAKsK,EAAEzH,WAAW,QAAS2I,MAAOgB,EAASlC,GAAGnM,SAR7C,OAAA2C,4EAaLsB,EAAOgH,GAChB9M,KAAKkG,SAAS,CAAChB,WAAY4H,qCAI3B,OACI3M,EAAAC,EAAAC,cAAA,OAAKyC,MAAO,CACRwM,SAAU,EACV1L,MAAO,OACPE,gBAAiB,UAEjB3D,EAAAC,EAAAC,cAACkP,EAAA,EAAD,CAAQC,SAAS,SAAS3I,MAAM,WAC5B1G,EAAAC,EAAAC,cAACoP,EAAA,EAAD,CACAC,kBAAmB,CAAC5M,MAAO,CAACgB,gBAAiB,UAC7CqC,MAAOnG,KAAK2O,MAAMzJ,WAClBkC,SAAUpH,KAAKgQ,aACfL,QAAQ,aACRC,cAAc,KACdC,eAAe,UACfC,UAAU,WAET9P,KAAKiQ,OAGV9P,EAAAC,EAAAC,cAAC8P,GAAD,CAAOjL,WAAYlF,KAAK2O,MAAMzJ,qBAvCFZ,2BCA5C8L,IAASC,OAAOlQ,EAAAC,EAAAC,cAACiQ,GAAD,MAASC,SAASC,eAAe","file":"static/js/main.1ce5a801.chunk.js","sourcesContent":["var map = {\n\t\"./0_Line.json\": 388\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 387;","var map = {\n\t\"./0_Bar.json\": 424\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 423;","var map = {\n\t\"./0_Scatter.json\": 426\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 425;","import React,{Component} from 'react';\nimport { ResponsiveLine } from '@nivo/line';\nimport {Row,Col} from 'reactstrap';\n\nexport default class LineGraph extends Component {\n\n    render(){\n\n        // set if area shown\n        var min='auto';\n        if(this.props.area){min=0;}\n\n        return(\n            <ResponsiveLine\n                data={this.props.data}\n                margin={{ top: 50, right: 10, bottom: 50, left: 60 }}\n                xScale={{ type: 'point', min: 'auto', max: 'auto' }}\n                yScale={{ type: 'linear', stacked: this.props.stacked, min: min, max: 'auto' }}\n                axisTop={null}\n                axisRight={null}\n                axisBottom={{\n                    orient: 'bottom',\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: -55,\n                    legend: 'year',\n                    legendOffset: 36,\n                    legendPosition: 'middle'\n                }}\n                axisLeft={{\n                    orient: 'left',\n                    tickSize: 4,\n                    tickPadding: 2,\n                    tickRotation: 0,\n                    legend: this.props.title,\n                    legendOffset: -40,\n                    legendPosition: 'middle'\n                }}\n                curve={this.props.curve}\n                enableSlices=\"x\"\n                colors={this.props.colors}\n                pointSize={10}\n                pointColor=\"#ffffff\"\n                enableArea={this.props.area}\n                areaOpacity={0.7}\n                pointBorderWidth={2}\n                pointBorderColor={{ from: 'serieColor' }}\n                pointLabel=\"y\"\n                pointLabelYOffset={-12}\n                useMesh={true}\n                sliceTooltip={({ slice }) => {\n                    // custom tooltip for stacked and not stacked\n                    return (\n                    <div\n                        style={{\n                        background: 'white',\n                        padding: '9px 12px',\n                        border: '1px solid #ccc',\n                        }}\n                    >\n                        {slice.points.sort((a,b)=>{\n                            if(b.data.hasOwnProperty(\"yStacked\")){\n                                return b.data.yStacked-a.data.yStacked;\n                            }\n                            return b.data.y-a.data.y;\n                        }).map(point => (\n                            <Row key={point.id} style={{margin:\"0\", alignItems:\"center\"}}>\n                                {/* color mark box on the left */}\n                                <div style={{\n                                    margin: \"10px\",\n                                    width: \"10px\", height:\"10px\", \n                                    backgroundColor:point.serieColor}}></div>\n\n                                {/* line name */}\n                                <Col style={{minWidth:\"300\",maxWidth:\"300\"}}>{point.serieId}</Col>\n\n                                {/* point value */}\n                                <Col style={{minWidth:\"30\",maxWidth:\"100\", textAlign:\"right\"}}>\n                                    <strong>{point.data.yFormatted}</strong>\n                                </Col>\n                            </Row>\n                        ))}\n                    </div>)\n                }}\n            />);\n    }\n}","/*\n    Notes:\n    - Group and Category are the same thing\n\n*/\n\nimport React, {Component} from 'react';\nimport { Row} from 'reactstrap';\nimport LineGraph from './LineGraph.js'\nimport Switch from \"react-switch\";\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport { withStyles } from '@material-ui/core/styles';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nconst maxInitalKeys   = 10;\n\nexport default class LineFrame extends Component {\n\n    constructor(props){\n        super(props);\n        this.options = {\n            category        : \"None\",\n            variable        : \"\",\n            curve           : \"cardinal\",\n            normalizer      : \"\",\n            stacked         : true,\n            selectedKeys    : {}\n        }\n\n        this.data               = {};\n        this.topicIndex         = -1;\n        this.variable           = \"\";\n        this.category           = \"None\";\n        this.variableItems      = [];\n        this.categoryItems      = [];\n        this.normalizerItems    = [];\n\n        this.legend             = [];\n        this.colors             = {};\n        this.filteredData       = [];\n        this.filteredColors     = [];\n        this.selectedChanged    = false;\n        this.normalizedData     = {};\n\n        this.changeInput        = this.changeInput.bind(this);\n        this.checkBox           = this.checkBox.bind(this);\n    }\n\n\n    // ============================ Input Handlers ========================== //\n    checkBox(event, checked){\n        this.options.selectedKeys[event.target.name] = checked;\n        this.selectedChanged = true;\n        this.setState({});\n    }\n\n    changeInput(event){\n        if(event===\"stacked\"){\n            this.options.stacked = !this.options.stacked;\n        }else{\n            this.options[event.target.name] = event.target.value;\n            if(event.target.name===\"normalizer\"){\n                this.selectedChanged = true;\n            }\n        }\n        this.setState({});\n    }\n    // ====================================================================== //\n\n\n    \n    render(){\n\n        // ============================ General ========================== //\n        // var i = 0;      // array index\n        var ct = 0;     // counter\n        var key = \"\";   // object key\n\n        // ============================= Init ============================= //\n        var topicIndex      = this.props.topicIndex;\n        var stacked         = this.options[\"stacked\"];\n        var category        = this.options[\"category\"];\n        var curve           = this.options[\"curve\"];\n        var variable        = this.options[\"variable\"];\n        var normalizer      = this.options[\"normalizer\"];\n\n        // =========================== Reload Topic =========================== //\n        if(this.topicIndex !== topicIndex){\n\n            // update data to new topic's\n            this.topicIndex = topicIndex;\n            this.data = require('../data/' + topicIndex.toString() + '_Line.json'); // AJAX CALL HERE\n\n            // Variable Menu\n            this.variableItems = [];\n            for(key in this.data){\n                this.variableItems.push(\n                    <MenuItem key={key} value={key}>{key}</MenuItem>\n                );\n            }\n            \n            // initialize choices\n            variable =  Object.keys(this.data)[0];\n            this.options[\"variable\"] = variable;\n        }\n\n        // =========================== Reload Variable =========================== //\n        if(this.variable !== variable || this.topicIndex !== topicIndex){\n\n            var groupingdata        = this.data[variable][\"group\"];\n            var normalizerdata      = this.data[variable][\"normalizer\"];\n\n            this.options[\"category\"]    = \"None\";\n            this.options[\"normalizer\"]  = \"\";\n            category                    = \"None\";\n            normalizer                  = \"\";\n\n            // ------------------- Group Menu ------------------- //\n            this.categoryItems = [];\n            for(key in groupingdata){\n                this.categoryItems.push(\n                    <MenuItem key={key} value={key}>{key}</MenuItem>\n                );\n            }\n\n            // ----------------- Normalizer Menu ----------------- //\n            // Normalize Menu\n            this.normalizerItems = [];\n            for(key in normalizerdata){\n                this.normalizerItems.push(\n                    <MenuItem key={key} value={key}>{key}</MenuItem>\n                );\n            }\n\n            // ------------------ Selected Keys ------------------ //\n            this.selectedChanged = true;\n            this.options[\"selectedKeys\"] = {};\n            ct = 0;\n            for(key in this.data[variable][\"data\"]){\n                this.options[\"selectedKeys\"][key] = (ct++ < maxInitalKeys);\n            }\n\n        }\n\n        \n\n        // =========================== Reload Category =========================== //\n        if(this.selectedChanged || this.category !== category || \n            this.variable !== variable || this.topicIndex !== topicIndex){\n            // --------------------- Legend --------------------- //\n            this.legend     = [];\n            this.colors     = {};\n            var colorcode   = this.data[variable][\"group\"][category];\n\n            for(key in colorcode){\n                var color = colorcode[key][\"color\"];\n                var ColorCheckbox = withStyles({\n                        root: {\n                            color: color\n                        }\n                    })(props => <Checkbox color=\"default\" {...props} />);\n\n                // No Grouping\n                if(colorcode[key][\"members\"]===undefined){\n                    this.colors[key] = color;\n                    this.legend.push(\n                        <Row key={key} style={{margin:\"0\", alignItems:\"center\"}}>\n                            <ColorCheckbox\n                                name={key}\n                                checked={this.options.selectedKeys[key]}\n                                onChange={this.checkBox}\n                                value=\"checkedG\"\n                            />\n                            <div style={{maxWidth:\"80px\",wordWrap: \"break-word\"}}>{key}</div>\n                        </Row>\n                    )\n                }\n                // Has Grouping\n                else{\n                    // Add all members of the group\n                    var checkboxes = [];\n                    for(var member in colorcode[key][\"members\"]){\n                        this.colors[colorcode[key][\"members\"][member]] = color;\n                        checkboxes.push(\n                            <Row key={colorcode[key][\"members\"][member]} style={{margin:\"0\", alignItems:\"center\"}}>\n                                <ColorCheckbox\n                                    name={colorcode[key][\"members\"][member]}\n                                    checked={this.options.selectedKeys[colorcode[key][\"members\"][member]]}\n                                    onChange={this.checkBox}\n                                    value=\"checkedG\"\n                                />\n                                <div style={{width:\"80px\",wordWrap: \"break-word\"}}>\n                                    {colorcode[key][\"members\"][member]}\n                                </div>\n                            </Row>\n                        )\n                    }\n        \n                    this.legend.push(\n                        <Row key={key} style={{margin:\"0\", alignItems:\"center\"}}>\n                            <div style={{wordWrap: \"break-word\",width:\"100%\"}}>{key}</div>\n                            {checkboxes}\n                        </Row>\n                    );\n                }\n            }\n            this.selectedChanged = true;\n        }\n\n        // =========================== Reload Selected =========================== //\n        if(this.selectedChanged){ \n            this.filteredData   = [];\n            this.filteredColors = [];\n            var years_index = this.data[variable][\"years\"];\n\n            // filter\n            for(key in this.options.selectedKeys){\n                if(this.options.selectedKeys[key]){\n                    var t_entry = this.data[variable][\"data\"][key];\n                    var normalizedEntry = {data:[],id:key};\n\n                    // normalize data\n                    for(var t_year in t_entry){\n\n                        var t_value         = t_entry[t_year];\n                        var t_index         = years_index[t_year];\n                        var t_normalizer    = 1;\n                        if(normalizer !== \"\"){\n                            t_normalizer = this.data[variable][\"normalizer\"][normalizer][key][t_year];\n                        }\n\n                        normalizedEntry[\"data\"][t_index] = {\n                            \"x\": t_year,\n                            \"y\": t_value / t_normalizer\n                        };\n                    }\n\n                    this.filteredData.push(normalizedEntry);\n                    this.filteredColors.push(this.colors[key]);\n                }\n            }\n        }\n\n        this.topicIndex         = topicIndex;\n        this.variable           = variable;\n        this.category           = category;\n        this.selectedChanged    = false;\n\n        return (\n                <Row style={{width:\"100%\", margin:\"0\", padding:\"0\"}}>\n\n                    {/* // =========================== Graph =========================== // */}\n                    <div style={{height:\"600px\", width:\"77%\"}}>\n                        {<LineGraph\n                                    data    = {this.filteredData} \n                                    stacked = {stacked} \n                                    area    = {stacked}\n                                    curve   = {curve}\n                                    title   = {this.data[variable].title}\n                                    colors  = {this.filteredColors}/>}\n                    </div>\n            \n                    {/* // =========================== Options =========================== // */}\n                    <div style={{height:\"600px\", width:\"23%\", padding:'2%', overflowY: \"scroll\"}}>\n\n                        {/* // --------------------------- Stacked --------------------------- // */}\n                        <Row style={{display:'flex',paddingLeft:\"10%\", marginBottom: \"5%\"}}>\n                            <Switch onColor     = \"#222429\" \n                                    onChange    = {() => {this.changeInput(\"stacked\")}} \n                                    checked     = {stacked}\n                                    value       = {stacked} />\n                            <div style={{marginLeft:\"4%\", fontFamily:\"Verdana\"}}>Stacked</div>\n                        </Row>\n                        <br />\n\n                        {/* // --------------------------- Curve --------------------------- // */}\n                        <div>\n                            <InputLabel shrink htmlFor=\"curve-label-placeholder\">\n                            Curve Type\n                            </InputLabel>\n                            <Select\n                                style       = {{width:\"100%\"}}\n                                value       = {curve}\n                                onChange    = {this.changeInput}\n                                input       = {<Input name=\"curve\" id=\"curve-label-placeholder\" />}\n                                name        = \"curve\"\n                                displayEmpty\n                            >\n                                <MenuItem value={'cardinal'}>Curved</MenuItem>\n                                <MenuItem value={'linear'}  >Linear</MenuItem>\n                            </Select>\n                        </div>\n                        <br/>\n\n                        {/* // --------------------------- Variable --------------------------- // */}\n                        <div>\n                            <InputLabel shrink htmlFor=\"variable-label-placeholder\">\n                            Variable\n                            </InputLabel>\n                            <Select\n                                style       = {{width:\"100%\"}}\n                                value       = {variable}\n                                onChange    = {this.changeInput}\n                                input       = {<Input name=\"variable\" id=\"variable-label-placeholder\" />}\n                                name        = \"variable\"\n                                displayEmpty\n                            >\n                                {this.variableItems}\n                            </Select>\n                        </div>\n                        <br />\n\n                        {/* // --------------------------- Normalize --------------------------- // */}\n                        <div>\n                            <InputLabel shrink htmlFor=\"normalize-label-placeholder\">\n                            Normalize\n                            </InputLabel>\n                            <Select\n                                style       = {{width:\"100%\"}}\n                                value       = {normalizer}\n                                onChange    = {this.changeInput}\n                                input       = {<Input name=\"normalizer\" id=\"normalize-label-placeholder\" />}\n                                name        = \"normalizer\"\n                                displayEmpty\n                            >\n                                <MenuItem value={''}>None</MenuItem>\n                                {this.normalizerItems}\n                            </Select>\n                        </div>\n                        <br />\n\n                        {/* // --------------------------- Categorize --------------------------- // */}\n                        <div>\n                            <InputLabel shrink htmlFor=\"categorize-label-placeholder\">\n                            Categorize\n                            </InputLabel>\n                            <Select\n                                style       = {{width:\"100%\"}}\n                                value       = {category}\n                                onChange    = {this.changeInput}\n                                input       = {<Input name=\"categorize\" id=\"categorize-label-placeholder\" />}\n                                name        = \"category\"\n                                displayEmpty\n                            >\n                                {this.categoryItems}\n                            </Select>\n                        </div>\n                        <br />\n\n                        {/* // --------------------------- Legend --------------------------- // */}\n                        <div>\n                            <div style={{\n                                        display         : \"inline-table\",\n                                        width           : \"100%\",\n                                        minWidth        : \"100%\",\n                                        whiteSpace      : \"nowrap\",\n                                        borderRadius    : \"2px\",\n                                        fontFamily      : \"Georgia\"\n                                    }}>\n                                {this.legend}\n                            </div>\n                        </div>\n                    </div>\n            </Row>\n        );\n    }\n}","import React, { useState, useEffect } from 'react';\nimport Slider from '@material-ui/core/Slider';\nimport { Bar } from '@nivo/bar';\nimport {Row} from 'reactstrap';\nimport PlayIcon from '@material-ui/icons/PlayArrow';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport Fab from '@material-ui/core/Fab';\nimport { withStyles } from '@material-ui/core/styles';\n\n\n// styling slider to make mark bigger\nconst styles = {\n    mark :{\n        width:\"2px\",\n        height:\"5px\",\n        backgroundColor:\"blue\"\n    }\n}\nconst StyledSlider = withStyles(styles)(Slider);\n\n\n// custom bar component, label inside\nconst BarComponent = props => {\n    var txt = null;\n\n    // set color if grouped\n    var _color = props.data.data._color;\n    if(props.data.data._byIndex){\n        _color = props.color\n    }\n\n    // if bar too small for text\n    if(15*props.data.id.toString().length < props.width && 15*2 < props.height){\n        txt= [<text\n            key={props.data.data.id.toString()+props.data.id.toString()+\"id\"}\n            x={props.width - 16}\n            y={props.height / 2 - 8}\n            textAnchor=\"end\"\n            dominantBaseline=\"central\"\n            fill=\"black\"\n            style={{\n            fontWeight: 900,\n            fontSize: 15,\n            }}\n        >\n            {props.data.id}\n        </text>,\n        <text\n            key={props.data.data.id.toString()+props.data.id.toString()+\"val\"}\n            x={props.width - 16}\n            y={props.height / 2 + 10}\n            textAnchor=\"end\"\n            dominantBaseline=\"central\"\n            fill={\"rgb(0,0,0)\"}\n            style={{\n            fontWeight: 400,\n            fontSize: 13,\n            }}\n        >\n            {props.data.value}\n        </text>]\n    }\n    return (\n        <g transform={`translate(${props.x},${props.y})`}>\n            <rect   x={-3} y={7} width={props.width} height={props.height} \n                    fill=\"rgba(0, 0, 0, .07)\" />\n            <rect   width={props.width} height={props.height} fill={_color} \n                    style={{strokeWidth:2, stroke:\"rgb(0,0,0)\"}} />\n            <rect   x={props.width - 5} width={5} height={props.height} \n                    fill={\"rgb(0,0,0)\"} fillOpacity={0.2} />\n            {txt}\n        </g>\n    );\n};\n\nconst Sample = (props) => {\n\n    const dataGenerator = props.data;\n    var groupMode = \"grouped\";\n    if(props.groupMode){\n        groupMode = \"stacked\";\n    }\n    const [current, setCurrent] = useState([0,0]);\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            if(current[1]){\n                setCurrent([(current[0] + 1)%dataGenerator.length,current[1]]);\n            }\n        }, 1400);\n        return () => clearTimeout(timer);\n    }, [current, setCurrent]);\n\n    if(current[0] >= props.data.length){\n        current[0] = props.data.length-1;\n    }\n\n    var barData = [];\n    if(props.ranking===\"top\"){\n        barData = dataGenerator[current[0]][1].sort((a, b) => a._total-b._total);\n    }else{\n        barData = dataGenerator[current[0]][1].sort((a, b) => b._total-a._total);\n    }\n    barData = barData.slice(dataGenerator[current[0]][1].length-props.numberOfItems);\n\n    return (\n        <>\n            <Bar\n                barComponent={BarComponent}\n                width={700}\n                height={500}\n                data={barData}\n                keys={props.pkeys}\n                indexBy=\"id\"\n                colorBy=\"id\"\n                margin={{ top: 50, right: 60, bottom: 50, left: 80 }}\n                padding={0.3}\n                groupMode={groupMode}\n                layout=\"horizontal\"\n                // colors={\"\"}\n                borderColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n                axisTop={null}\n                axisRight={null}\n                axisBottom={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: props.title,\n                    legendPosition: 'middle',\n                    legendOffset: 32\n                }}\n                enableGridX={false}\n                enableGridY={false}\n                axisLeft={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legendPosition: 'middle',\n                    legendOffset: -40\n                }}\n                labelSkipWidth={12}\n                labelSkipHeight={12}\n                labelTextColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n                animate={true}\n                motionStiffness={90}\n                motionDamping={15}\n            />\n        \n            {/* ----------------------------------- Year ----------------------------------- */}\n            <h2 style={{ marginLeft: 60, fontWeight: 400, color: '#555', textAlign:\"center\" }}>\n                <strong style={{ color: 'black', fontWeight: 900 }}>{dataGenerator[current[0]][0]}</strong>\n            </h2>\n\n            {/* --------------------------  Player and Progress Bar-------------------------- */}\n            <Row style={{margin:0, padding:0, alignItems:\"center\"}}>\n                <Fab onClick={()=>{setCurrent([(current[0] - current[1]+1)%dataGenerator.length,1-current[1]])}}\n                    size=\"medium\" aria-label=\"Add\" style={{marginLeft:50}}>\n                    {[<PlayIcon />,<PauseIcon />][current[1]]}\n                </Fab>\n                \n                <StyledSlider value={current[0]}\n                        style={{width:550, marginLeft:30}}\n                        aria-labelledby=\"discrete-slider\"\n                        step={1}\n                        onChange={(event, newValue)=>{setCurrent([newValue,current[1]])}}\n                        marks\n                        min={0}\n                        max={dataGenerator.length-1}/>\n            </Row>\n        </>\n    );\n};\n\nexport default Sample;","/*\n    Notes:\n    - Group and Category are the same thing\n\n*/\n\nimport React, {Component} from 'react';\nimport { Row} from 'reactstrap';\nimport BarGraph from './RaceBar.js';\nimport Switch from \"react-switch\";\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport { withStyles } from '@material-ui/core/styles';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nconst maxInitalKeys   = 10;\n\nexport default class BarFrame extends Component {\n\n    constructor(props){\n        super(props);\n        this.options = {\n            category        : \"None\",\n            variable        : \"\",\n            normalizer      : \"\",\n            stacked         : true,\n            selectedKeys    : {},\n            selectedItems   : [],\n            ranking         : \"top\",\n            numberOfItems   : 4\n        }\n\n        this.data               = {};\n        this.topicIndex         = -1;\n        this.variable           = \"\";\n        this.category           = \"None\";\n        this.variableItems      = [];\n        this.categoryItems      = [];\n        this.normalizerItems    = [];\n\n        this.legend             = [];\n        this.colors             = {};\n        this.filteredData       = [];\n        this.filteredColors     = [];\n        this.selectedChanged    = false;\n        this.normalizedData     = {};\n\n        this.changeInput        = this.changeInput.bind(this);\n        this.checkBox           = this.checkBox.bind(this);\n    }\n\n\n    // ============================ Input Handlers ========================== //\n    checkBox(event, checked){\n        this.options.selectedKeys[event.target.name] = checked;\n        this.selectedChanged = true;\n        this.setState({});\n    }\n\n    changeInput(event){\n        if(event===\"stacked\"){\n            this.options.stacked = !this.options.stacked;\n        }else{\n            this.options[event.target.name] = event.target.value;\n            if(event.target.name===\"normalizer\"){\n                this.selectedChanged = true;\n            }\n        }\n        this.setState({});\n    }\n    // ====================================================================== //\n\n\n    \n    render(){\n\n        // ============================ General ========================== //\n        // var i = 0;      // array index\n        var ct = 0;     // counter\n        var key = \"\";   // object key\n\n        // ============================= Init ============================= //\n        var topicIndex      = this.props.topicIndex;\n        var stacked         = this.options[\"stacked\"];\n        var category        = this.options[\"category\"];\n        var variable        = this.options[\"variable\"];\n        var normalizer      = this.options[\"normalizer\"];\n        var numberOfItems   = this.options[\"numberOfItems\"];\n        var ranking         = this.options[\"ranking\"];\n\n        // =========================== Reload Topic =========================== //\n        if(this.topicIndex !== topicIndex){\n\n            // update data to new topic's\n            this.topicIndex = topicIndex;\n            this.data = require('../data/' + topicIndex.toString() + '_Bar.json'); // AJAX CALL HERE\n\n            // Variable Menu\n            this.variableItems = [];\n            for(key in this.data){\n                this.variableItems.push(\n                    <MenuItem key={key} value={key}>{key}</MenuItem>\n                );\n            }\n            \n            // initialize choices\n            variable =  Object.keys(this.data)[0];\n            this.options[\"variable\"] = variable;\n        }\n\n        // =========================== Reload Variable =========================== //\n        if(this.variable !== variable || this.topicIndex !== topicIndex){\n\n            var groupingdata        = this.data[variable][\"group\"];\n            var normalizerdata      = this.data[variable][\"normalizer\"];\n\n            this.options[\"category\"]    = \"None\";\n            this.options[\"normalizer\"]  = \"\";\n            category                    = \"None\";\n            normalizer                  = \"\";\n\n            // ------------------- Group Menu ------------------- //\n            this.categoryItems = [];\n            for(key in groupingdata){\n                this.categoryItems.push(\n                    <MenuItem key={key} value={key}>{key}</MenuItem>\n                );\n            }\n\n            // ----------------- Normalizer Menu ----------------- //\n            // Normalize Menu\n            this.normalizerItems = [];\n            for(key in normalizerdata){\n                this.normalizerItems.push(\n                    <MenuItem key={key} value={key}>{key}</MenuItem>\n                );\n            }\n\n            // ------------------ Selected Keys ------------------ //\n            this.selectedChanged = true;\n            this.options[\"selectedKeys\"] = {};\n            ct = 0;\n            for(key in this.data[variable][\"data\"]){\n                this.options[\"selectedKeys\"][key] = (ct++ < maxInitalKeys);\n            }\n\n             // ------------------ Selected Items ------------------ //\n            this.options.selectedItems = [];\n            for(key in this.data[variable][\"items\"]){\n                this.options.selectedItems.push(this.data[variable][\"items\"][key]);\n            }\n\n        }\n\n        \n\n        // =========================== Reload Category =========================== //\n        if(this.selectedChanged || this.category !== category || \n            this.variable !== variable || this.topicIndex !== topicIndex){\n            // --------------------- Legend --------------------- //\n            this.legend     = [];\n            this.colors     = {};\n            var colorcode   = this.data[variable][\"group\"][category];\n\n            for(key in colorcode){\n                var color = colorcode[key][\"color\"];\n                var ColorCheckbox = withStyles({\n                        root: {\n                            color: color\n                        }\n                    })(props => <Checkbox color=\"default\" {...props} />);\n\n                // No Grouping\n                if(colorcode[key][\"members\"]===undefined){\n                    this.colors[key] = color;\n                    this.legend.push(\n                        <Row key={key} style={{margin:\"0\", alignItems:\"center\"}}>\n                            <ColorCheckbox\n                                name={key}\n                                checked={this.options.selectedKeys[key]}\n                                onChange={this.checkBox}\n                                value=\"checkedG\"\n                            />\n                            <div style={{maxWidth:\"80px\",wordWrap: \"break-word\"}}>{key}</div>\n                        </Row>\n                    )\n                }\n                // Has Grouping\n                else{\n                    // Add all members of the group\n                    var checkboxes = [];\n                    for(var member in colorcode[key][\"members\"]){\n                        this.colors[colorcode[key][\"members\"][member]] = color;\n                        checkboxes.push(\n                            <Row key={colorcode[key][\"members\"][member]} style={{margin:\"0\", alignItems:\"center\"}}>\n                                <ColorCheckbox\n                                    name={colorcode[key][\"members\"][member]}\n                                    checked={this.options.selectedKeys[colorcode[key][\"members\"][member]]}\n                                    onChange={this.checkBox}\n                                    value=\"checkedG\"\n                                />\n                                <div style={{width:\"80px\",wordWrap: \"break-word\"}}>\n                                    {colorcode[key][\"members\"][member]}\n                                </div>\n                            </Row>\n                        )\n                    }\n        \n                    this.legend.push(\n                        <Row key={key} style={{margin:\"0\", alignItems:\"center\"}}>\n                            <div style={{wordWrap: \"break-word\",width:\"100%\"}}>{key}</div>\n                            {checkboxes}\n                        </Row>\n                    );\n                }\n            }\n            this.selectedChanged = true;\n        }\n\n        // =========================== Reload Selected =========================== //\n        if(this.selectedChanged){ \n            this.filteredColors = [];\n            this.filteredData   = [];\n            var years_index = this.data[variable][\"years\"];\n\n            for(key in years_index){\n                this.filteredData[years_index[key]] = [key,[]]; \n            }\n\n            // filter\n            for(key in this.options.selectedKeys){\n                if(this.options.selectedKeys[key]){\n                    var t_entry = this.data[variable][\"data\"][key];\n\n                    // normalize data\n                    for(var t_year in t_entry){\n\n                        var normalizedEntry = {\n                            \"id\" : key\n                        };\n\n                        var t_index         = years_index[t_year];\n                        var t_sum           = 0;\n                        var t_normalizer    = 1;\n                        if(normalizer !== \"\"){\n                            t_normalizer = this.data[variable][\"normalizer\"][normalizer][key][t_year];\n                        }\n                        \n                        for(var item in t_entry[t_year]){\n                            normalizedEntry[item] = t_entry[t_year][item] / t_normalizer;\n                            t_sum += normalizedEntry[item];\n                        }\n                        \n                        normalizedEntry[\"_total\"]   = t_sum;\n                        normalizedEntry[\"_byIndex\"] = (category) === \"None\";\n                        normalizedEntry[\"_color\"]   = this.colors[key];\n\n                        this.filteredData[t_index][1].push(normalizedEntry);\n\n                    }\n                }\n            }\n        }\n\n        this.topicIndex         = topicIndex;\n        this.variable           = variable;\n        this.category           = category;\n        this.selectedChanged    = false;\n\n        return (\n                <Row style={{height:\"600px\",width:\"100%\", margin:\"0\", padding:\"0\"}}>\n\n                    {/* // =========================== Graph =========================== // */}\n                    <div style={{width:\"77%\"}}>\n                        {<BarGraph\n                                data            = {this.filteredData} \n                                groupMode       = {stacked}\n                                title           = {this.data[variable].title}\n                                pkeys           = {this.options.selectedItems}\n                                numberOfItems   = {numberOfItems}\n                                ranking         = {ranking}\n                            />}\n                    </div>\n            \n                    {/* // =========================== Options =========================== // */}\n                    <div style={{width:\"23%\", padding:'2%', overflowY: \"scroll\"}}>\n\n                        {/* // --------------------------- Stacked --------------------------- // */}\n                        <Row style={{display:'flex',paddingLeft:\"10%\", marginBottom: \"5%\"}}>\n                            <Switch onColor     = \"#222429\" \n                                    checked     = {stacked}\n                                    onChange    = {() => {this.changeInput(\"stacked\")}} \n                                    value       = {stacked} />\n                            <div style={{marginLeft:\"4%\", fontFamily:\"Verdana\"}}>Stacked</div>\n                        </Row>\n                        <br />\n\n                        {/* // --------------------------- Variable --------------------------- // */}\n                        <div>\n                            <InputLabel shrink htmlFor=\"variable-label-placeholder\">\n                            Variable\n                            </InputLabel>\n                            <Select\n                                style       = {{width:\"100%\"}}\n                                value       = {variable}\n                                onChange    = {this.changeInput}\n                                input       = {<Input name=\"variable\" id=\"variable-label-placeholder\" />}\n                                name        = \"variable\"\n                                displayEmpty\n                            >\n                                {this.variableItems}\n                            </Select>\n                        </div>\n                        <br />\n\n                        {/* // --------------------------- Normalize --------------------------- // */}\n                        <div>\n                            <InputLabel shrink htmlFor=\"normalize-label-placeholder\">\n                            Normalize\n                            </InputLabel>\n                            <Select\n                                style       = {{width:\"100%\"}}\n                                value       = {normalizer}\n                                onChange    = {this.changeInput}\n                                input       = {<Input name=\"normalizer\" id=\"normalize-label-placeholder\" />}\n                                name        = \"normalizer\"\n                                displayEmpty\n                            >\n                                <MenuItem value={''}>None</MenuItem>\n                                {this.normalizerItems}\n                            </Select>\n                        </div>\n                        <br />\n                        \n                        {/* // --------------------------- Top/Bottom --------------------------- // */}\n                        <div style={{width:\"100%\"}}>\n                            <InputLabel shrink htmlFor=\"ranking-label-placeholder\">\n                            Ranking\n                            </InputLabel>\n                            <Select\n                                style       = {{width:\"60%\"}}\n                                value       = {ranking}\n                                onChange    = {this.changeInput}\n                                input       = {<Input name=\"ranking\" id=\"ranking-label-placeholder\" />}\n                                name        = \"ranking\"\n                                displayEmpty\n                            >\n                                <MenuItem value={\"top\"}>Top</MenuItem>\n                                <MenuItem value={\"bottom\"}>Bottom</MenuItem>\n                            </Select>\n                            <Select\n                                style       = {{width:\"39%\",marginLeft:\"1%\"}}\n                                value       = {numberOfItems}\n                                onChange    = {this.changeInput}\n                                input       = {<Input name=\"numberOfItems\" id=\"numberOfItems-label-placeholder\" />}\n                                name        = \"numberOfItems\"\n                                displayEmpty\n                            >\n                                <MenuItem value={1}>1</MenuItem>\n                                <MenuItem value={2}>2</MenuItem>\n                                <MenuItem value={3}>3</MenuItem>\n                                <MenuItem value={4}>4</MenuItem>\n                            </Select>\n                        </div>\n                        <br />\n                        \n                        {/* // --------------------------- Categorize --------------------------- // */}\n                        <div>\n                            <InputLabel shrink htmlFor=\"categorize-label-placeholder\">\n                            Categorize\n                            </InputLabel>\n                            <Select\n                                style       = {{width:\"100%\"}}\n                                value       = {category}\n                                onChange    = {this.changeInput}\n                                input       = {<Input name=\"categorize\" id=\"categorize-label-placeholder\" />}\n                                name        = \"category\"\n                                displayEmpty\n                            >\n                                {this.categoryItems}\n                            </Select>\n                        </div>\n                        <br />\n\n                        {/* // --------------------------- Legend --------------------------- // */}\n                        <div>\n                            <div style={{\n                                        display         : \"inline-table\",\n                                        width           : \"100%\",\n                                        minWidth        : \"100%\",\n                                        whiteSpace      : \"nowrap\",\n                                        borderRadius    : \"2px\",\n                                        fontFamily      : \"Georgia\"\n                                    }}>\n                                {this.legend}\n                            </div>\n                        </div>\n                    </div>\n            </Row>\n        );\n    }\n}","import React, { useState, useEffect } from 'react';\nimport Slider from '@material-ui/core/Slider';\nimport { ResponsiveScatterPlot } from '@nivo/scatterplot'\nimport {Row} from 'reactstrap';\nimport PlayIcon from '@material-ui/icons/PlayArrow';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport Fab from '@material-ui/core/Fab';\nimport { withStyles } from '@material-ui/core/styles';\n\n// styling slider to make mark bigger\nconst styles = {\n    mark :{\n        width:\"2px\",\n        height:\"5px\",\n        backgroundColor:\"blue\"\n    }\n}\nconst StyledSlider = withStyles(styles)(Slider);\n\nconst Scatter = (props) => {\n\n    const dataGenerator = props.dataGenerator;\n    const [current, setCurrent] = useState([0,0]);\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            if(current[1]){\n                setCurrent([(current[0] + 1)%dataGenerator.length,current[1]]);\n            }\n        }, 1400);\n        return () => clearTimeout(timer);\n    }, [current, setCurrent]);\n\n    if(current[0] >= props.dataGenerator.length){\n        current[0] = props.dataGenerator.length-1;\n    }\n\n    return (\n        <>\n        \n            <div style={{width:'100%',height:\"500px\"}}>\n                <ResponsiveScatterPlot\n                    data={dataGenerator[current[0]][1]}\n                    useMesh={false}\n                    margin={{ top: 60, right: 60, bottom: 70, left: 90 }}\n                    xScale={{ type: 'linear', min: 'auto', max: 'auto' }}\n                    // xFormat={function(e){return e+\" kg\"}}\n                    yScale={{ type: 'linear', min: 'auto', max: 'auto' }}\n                    // yFormat={function(e){return e+\" cm\"}}\n                    blendMode=\"multiply\"\n                    axisTop={null}\n                    axisRight={null}\n                    axisBottom={{\n                        orient: 'bottom',\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: props.titleX,\n                        legendPosition: 'middle',\n                        legendOffset: 46\n                    }}\n                    axisLeft={{\n                        orient: 'left',\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: props.titleY,\n                        legendPosition: 'middle',\n                        legendOffset: -60\n                    }}\n                />\n            </div>\n        \n            {/* ----------------------------------- Year ----------------------------------- */}\n            <h2 style={{ marginLeft: 60, fontWeight: 400, color: '#555', textAlign:\"center\" }}>\n                <strong style={{ color: 'black', fontWeight: 900 }}>{dataGenerator[current[0]][0]}</strong>\n            </h2>\n\n            {/* --------------------------  Player and Progress Bar-------------------------- */}\n            <Row style={{margin:0, padding:0, alignItems:\"center\"}}>\n                <Fab onClick={()=>{setCurrent([(current[0] - current[1]+1)%dataGenerator.length,1-current[1]])}}\n                    size=\"medium\" aria-label=\"Add\" style={{marginLeft:50}}>\n                    {[<PlayIcon />,<PauseIcon />][current[1]]}\n                </Fab>\n                \n                <StyledSlider value={current[0]}\n                        style={{width:550, marginLeft:30}}\n                        aria-labelledby=\"discrete-slider\"\n                        step={1}\n                        onChange={(event, newValue)=>{setCurrent([newValue,current[1]])}}\n                        marks\n                        min={0}\n                        max={dataGenerator.length-1}/>\n            </Row>\n        </>\n    );\n};\n\nexport default Scatter;","/*\n    Notes:\n    - Group and Category are the same thing\n    - normalizer refers to Y\n*/\n\nimport React, {Component} from 'react';\nimport { Row} from 'reactstrap';\nimport ScatterGraph from './ScatterGraph.js';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport { withStyles } from '@material-ui/core/styles';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nconst maxInitalKeys   = 10;\n\nexport default class ScatterFrame extends Component {\n\n    constructor(props){\n        super(props);\n        this.options = {\n            category        : \"None\",\n            variable        : \"\",\n            variableX       : \"\",\n            variableY       : \"\",\n            normalizerX     : \"\",\n            normalizer      : \"\",\n            selectedKeys    : {}\n        }\n\n        this.data               = {};\n        this.topicIndex         = -1;\n        this.variable           = \"\";\n        this.variableX          = \"\";\n        this.variableY          = \"\";\n        this.category           = \"None\";\n        this.variableItems      = [];\n        this.variableItemsXY    = [];\n        this.categoryItems      = [];\n        this.normalizerItems    = [];\n\n        this.legend             = [];\n        this.colors             = {};\n        this.filteredData       = [];\n        this.filteredColors     = [];\n        this.selectedChanged    = false;\n        this.normalizedData     = {};\n\n        this.changeInput        = this.changeInput.bind(this);\n        this.checkBox           = this.checkBox.bind(this);\n    }\n\n\n    // ============================ Input Handlers ========================== //\n    checkBox(event, checked){\n        this.options.selectedKeys[event.target.name] = checked;\n        this.selectedChanged = true;\n        this.setState({});\n    }\n\n    changeInput(event){\n        this.options[event.target.name] = event.target.value;\n        if(event.target.name===\"normalizer\"||event.target.name===\"normalizerX\") this.selectedChanged = true;\n        this.setState({});\n    }\n    // ====================================================================== //\n\n\n    \n    render(){\n\n        // ============================ General ========================== //\n        var i = 0;      // array index\n        var ct = 0;     // counter\n        var key = \"\";   // object key\n\n        // ============================= Init ============================= //\n        var topicIndex      = this.props.topicIndex;\n        var category        = this.options[\"category\"];\n        var variable        = this.options[\"variable\"];\n        var variableX       = this.options[\"variableX\"];\n        var variableY       = this.options[\"variableY\"];\n        var normalizerX     = this.options[\"normalizerX\"];\n        var normalizer      = this.options[\"normalizer\"];\n\n        // =========================== Reload Topic =========================== //\n        if(this.topicIndex !== topicIndex){\n\n            // update data to new topic's\n            this.topicIndex = topicIndex;\n            this.data = require('../data/' + topicIndex.toString() + '_Scatter.json'); // AJAX CALL HERE\n\n            // ------------------- Variable Menu ------------------- //\n            this.variableItems = [];\n            for(key in this.data){\n                this.variableItems.push(\n                    <MenuItem key={key} value={key}>{key}</MenuItem>\n                );\n            }\n            \n            // initialize choices\n            variable  = Object.keys(this.data)[0];\n            this.options[\"variable\"]  = variable;\n\n        }\n\n        // =========================== Reload Variable =========================== //\n        if(this.variable !== variable  || this.topicIndex !== topicIndex){\n\n            // ------------------- VariableXY Menu ------------------- //\n            this.variableItemsXY = [];\n            var headers = [];\n            for(i in this.data[variable][\"items\"]){\n                key = this.data[variable][\"items\"][i];\n                headers.push(key);\n                this.variableItemsXY.push(\n                    <MenuItem key={key} value={key}>{key}</MenuItem>\n                );\n            }\n\n            variableX  = headers[0];\n            variableY  = headers[0];\n            if(headers.length > 1) variableY  = headers[1];\n            this.options[\"variableX\"] = variableX;\n            this.options[\"variableY\"] = variableY;\n\n            var groupingdata        = this.data[variable][\"group\"];\n            var normalizerdata      = this.data[variable][\"normalizer\"];\n\n            this.options[\"category\"]    = \"None\";\n            this.options[\"normalizerX\"] = \"\";\n            this.options[\"normalizer\"]  = \"\";\n            category                    = \"None\";\n            normalizerX                 = \"\";\n            normalizer                  = \"\";\n\n            // ------------------- Group Menu ------------------- //\n            this.categoryItems = [];\n            for(key in groupingdata){\n                this.categoryItems.push(\n                    <MenuItem key={key} value={key}>{key}</MenuItem>\n                );\n            }\n\n            // ----------------- Normalizer Menu ----------------- //\n            // Normalize Menu\n            this.normalizerItems = [];\n            for(key in normalizerdata){\n                this.normalizerItems.push(\n                    <MenuItem key={key} value={key}>{key}</MenuItem>\n                );\n            }\n\n            // ------------------ Selected Keys ------------------ //\n            this.selectedChanged = true;\n            this.options[\"selectedKeys\"] = {};\n            ct = 0;\n            for(key in this.data[variable][\"data\"]){\n                this.options[\"selectedKeys\"][key] = (ct++ < maxInitalKeys);\n            }\n\n             // ------------------ Selected Items ------------------ //\n            this.options.selectedItems = [];\n            for(key in this.data[variable][\"items\"]){\n                this.options.selectedItems.push(this.data[variable][\"items\"][key]);\n            }\n\n        }\n\n        \n\n        // =========================== Reload Category =========================== //\n        if(this.selectedChanged || this.category !== category || \n            this.variable !== variable || this.topicIndex !== topicIndex){\n            // --------------------- Legend --------------------- //\n            this.legend     = [];\n            this.colors     = {};\n            var colorcode   = this.data[variable][\"group\"][category];\n\n            for(key in colorcode){\n                var color = colorcode[key][\"color\"];\n                var ColorCheckbox = withStyles({\n                        root: {\n                            color: color\n                        }\n                    })(props => <Checkbox color=\"default\" {...props} />);\n\n                // No Grouping\n                if(colorcode[key][\"members\"]===undefined){\n                    this.colors[key] = color;\n                    this.legend.push(\n                        <Row key={key} style={{margin:\"0\", alignItems:\"center\"}}>\n                            <ColorCheckbox\n                                name={key}\n                                checked={this.options.selectedKeys[key]}\n                                onChange={this.checkBox}\n                                value=\"checkedG\"\n                            />\n                            <div style={{maxWidth:\"80px\",wordWrap: \"break-word\"}}>{key}</div>\n                        </Row>\n                    )\n                }\n                // Has Grouping\n                else{\n                    // Add all members of the group\n                    var checkboxes = [];\n                    for(var member in colorcode[key][\"members\"]){\n                        this.colors[colorcode[key][\"members\"][member]] = color;\n                        checkboxes.push(\n                            <Row key={colorcode[key][\"members\"][member]} style={{margin:\"0\", alignItems:\"center\"}}>\n                                <ColorCheckbox\n                                    name={colorcode[key][\"members\"][member]}\n                                    checked={this.options.selectedKeys[colorcode[key][\"members\"][member]]}\n                                    onChange={this.checkBox}\n                                    value=\"checkedG\"\n                                />\n                                <div style={{width:\"80px\",wordWrap: \"break-word\"}}>\n                                    {colorcode[key][\"members\"][member]}\n                                </div>\n                            </Row>\n                        )\n                    }\n        \n                    this.legend.push(\n                        <Row key={key} style={{margin:\"0\", alignItems:\"center\"}}>\n                            <div style={{wordWrap: \"break-word\",width:\"100%\"}}>{key}</div>\n                            {checkboxes}\n                        </Row>\n                    );\n                }\n            }\n            this.selectedChanged = true;\n        }\n\n        // =========================== Reload Selected =========================== //\n        if(this.selectedChanged || this.variableX !== variableX || this.variableY !== variableY){ \n            this.filteredData   = [];\n            this.filteredColors = [];\n            var years_index = this.data[variable][\"years\"];\n\n            for(key in years_index){\n                this.filteredData[years_index[key]] = [key,[]]; \n            }\n\n            // filter\n            for(key in this.options.selectedKeys){\n                if(this.options.selectedKeys[key]){\n                    var t_entry = this.data[variable][\"data\"][key];\n\n                    // normalize data\n                    for(var t_year in t_entry){\n\n                        var normalizedEntry = {data:[],id:key};\n                        var t_index         = years_index[t_year];\n                        var t_normalizerX   = 1;\n                        var t_normalizer    = 1;\n\n                        if(normalizerX !== \"\"){\n                            t_normalizerX = this.data[variable][\"normalizer\"][normalizerX][key][t_year];\n                        }\n                        if(normalizer !== \"\"){\n                            t_normalizer  = this.data[variable][\"normalizer\"][normalizer][key][t_year];\n                        }\n\n                        normalizedEntry[\"data\"].push( {\n                            \"x\": t_entry[t_year][variableX]/t_normalizerX,\n                            \"y\": t_entry[t_year][variableY]/t_normalizer\n                        });\n                        this.filteredData[t_index][1].push(normalizedEntry);\n                    }\n\n                    this.filteredColors.push(this.colors[key]);\n                }\n            }\n        }\n\n        this.topicIndex         = topicIndex;\n        this.variable           = variable;\n        this.variableX          = variableX;\n        this.variableY          = variableY;\n        this.category           = category;\n        this.selectedChanged    = false;\n\n        return (\n                <Row style={{width:\"100%\", margin:\"0\", padding:\"0\"}}>\n\n                    {/* // =========================== Graph =========================== // */}\n                    <div style={{height:\"600px\", width:\"77%\"}}>\n                        {<ScatterGraph\n                                titleX={variableX}\n                                titleY={variableY}\n                                dataGenerator={this.filteredData}\n                            />}\n                    </div>\n            \n                    {/* // =========================== Options =========================== // */}\n                    <div style={{height:\"600px\", width:\"23%\", padding:'2%', overflowY: \"scroll\"}}>\n\n                        {/* // --------------------------- Variable --------------------------- // */}\n                        <div>\n                            <InputLabel shrink htmlFor=\"variable-label-placeholder\">\n                            Plot\n                            </InputLabel>\n                            <Select\n                                style       = {{width:\"100%\"}}\n                                value       = {variable}\n                                onChange    = {this.changeInput}\n                                input       = {<Input name=\"variable\" id=\"variable-label-placeholder\" />}\n                                name        = \"variable\"\n                                displayEmpty\n                            >\n                                {this.variableItems}\n                            </Select>\n                        </div>\n                        <br/>\n\n                        {/* // --------------------------- VariableX --------------------------- // */}\n                        <div>\n                            <InputLabel shrink htmlFor=\"variableX-label-placeholder\">\n                            X Values\n                            </InputLabel>\n                            <Select\n                                style       = {{width:\"100%\"}}\n                                value       = {variableX}\n                                onChange    = {this.changeInput}\n                                input       = {<Input name=\"variableX\" id=\"variableX-label-placeholder\" />}\n                                name        = \"variableX\"\n                                displayEmpty\n                            >\n                                {this.variableItemsXY}\n                            </Select>\n                        </div>\n                        <br />\n\n                        {/* // --------------------------- NormalizeX --------------------------- // */}\n                        <div>\n                            <InputLabel shrink htmlFor=\"normalizeX-label-placeholder\">\n                            X Normalizer\n                            </InputLabel>\n                            <Select\n                                style       = {{width:\"100%\"}}\n                                value       = {normalizerX}\n                                onChange    = {this.changeInput}\n                                input       = {<Input name=\"normalizerX\" id=\"normalizeX-label-placeholder\" />}\n                                name        = \"normalizerX\"\n                                displayEmpty\n                            >\n                                <MenuItem value={''}>None</MenuItem>\n                                {this.normalizerItems}\n                            </Select>\n                        </div>\n                        <br />\n\n                        {/* // --------------------------- VariableY --------------------------- // */}\n                        <div>\n                            <InputLabel shrink htmlFor=\"variableY-label-placeholder\">\n                            Y Values\n                            </InputLabel>\n                            <Select\n                                style       = {{width:\"100%\"}}\n                                value       = {variableY}\n                                onChange    = {this.changeInput}\n                                input       = {<Input name=\"variableY\" id=\"variableY-label-placeholder\" />}\n                                name        = \"variableY\"\n                                displayEmpty\n                            >\n                                {this.variableItemsXY}\n                            </Select>\n                        </div>\n                        <br />\n\n                        {/* // --------------------------- NormalizeY --------------------------- // */}\n                        <div>\n                            <InputLabel shrink htmlFor=\"normalize-label-placeholder\">\n                            Y Normalizer\n                            </InputLabel>\n                            <Select\n                                style       = {{width:\"100%\"}}\n                                value       = {normalizer}\n                                onChange    = {this.changeInput}\n                                input       = {<Input name=\"normalizer\" id=\"normalize-label-placeholder\" />}\n                                name        = \"normalizer\"\n                                displayEmpty\n                            >\n                                <MenuItem value={''}>None</MenuItem>\n                                {this.normalizerItems}\n                            </Select>\n                        </div>\n                        <br />\n\n                        {/* // --------------------------- Categorize --------------------------- // */}\n                        <div>\n                            <InputLabel shrink htmlFor=\"categorize-label-placeholder\">\n                            Categorize\n                            </InputLabel>\n                            <Select\n                                style       = {{width:\"100%\"}}\n                                value       = {category}\n                                onChange    = {this.changeInput}\n                                input       = {<Input name=\"categorize\" id=\"categorize-label-placeholder\" />}\n                                name        = \"category\"\n                                displayEmpty\n                            >\n                                {this.categoryItems}\n                            </Select>\n                        </div>\n                        <br />\n\n                        {/* // --------------------------- Legend --------------------------- // */}\n                        <div>\n                            <div style={{\n                                        display         : \"inline-table\",\n                                        width           : \"100%\",\n                                        minWidth        : \"100%\",\n                                        whiteSpace      : \"nowrap\",\n                                        borderRadius    : \"2px\",\n                                        fontFamily      : \"Georgia\"\n                                    }}>\n                                {this.legend}\n                            </div>\n                        </div>\n                    </div>\n            </Row>\n        );\n    }\n}","import React, {Component} from 'react';\nimport LineFrame from '../Timeline/LineFrame.js'\nimport BarFrame from '../Bar/BarFrame.js'\nimport ScatterFrame from '../Scatter/ScatterFrame.js'\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport LineIcon from '@material-ui/icons/Timeline';\nimport BarIcon from '@material-ui/icons/Notes';\nimport ScatterIcon from '@material-ui/icons/ScatterPlot';\nimport MapIcon from '@material-ui/icons/Map';\n\nconst graphTypes = [\"Line\", \"Bar\", \"Scatter\", \"Map\"];\nconst graphIcons = [<LineIcon />,<BarIcon />,<ScatterIcon />,<MapIcon />];\n\nexport default class Topic extends Component {\n\n    constructor(props){\n        super(props);\n        this.state          = {graphIndex:0};\n        this.changeInnerTab = this.changeInnerTab.bind(this);\n        this.graphtabs      = [];\n        this.graph          = <LineFrame topicIndex={this.props.topicIndex}/>;\n\n        for(var i in graphTypes){\n            this.graphtabs.push(<Tab key={graphTypes[i]} label={graphTypes[i]} icon={graphIcons[i]}/>);\n        }\n        \n    }\n\n    changeInnerTab(event, newValue){\n        this.graph = [\n            <LineFrame topicIndex={this.props.topicIndex}/>,\n            <BarFrame topicIndex={this.props.topicIndex}/>,\n            <ScatterFrame topicIndex={this.props.topicIndex}/>,\n            <LineFrame topicIndex={this.props.topicIndex}/>\n        ][newValue];\n        this.setState({graphIndex: newValue});\n    }\n\n    render(){\n\n        return (\n            <div style={{\n                flexGrow: 1,\n                width: '100%'\n            }}>\n\n                <AppBar position=\"static\">\n                    <Tabs\n                        TabIndicatorProps   = {{style: {backgroundColor: 'black'}}}\n                        value               = {this.state.graphIndex}\n                        onChange            = {this.changeInnerTab}\n                        variant             = \"scrollable\"\n                        scrollButtons       = \"on\"\n                        indicatorColor      = \"primary\"\n                        textColor           = \"inherit\"\n                        style               = {{background:\"gray\"}}\n                        >\n                    {this.graphtabs}\n                    </Tabs>\n                </AppBar>\n                    {this.graph}\n                <br />\n                \n                {/* <div><GrabData url=\"http://13.56.207.238:5000/database/1\"/></div> */}\n            </div>\n        );\n    }\n}","import React, {Component} from 'react';\nimport projects from './data/projects.json'\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Topic from './Topic/Topic.js'\n\nexport default class ScrollableTabs extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {topicIndex: 0};\n        this.handleChange = this.handleChange.bind(this);\n\n        this.tabs = [];\n        for(var i in projects){\n            this.tabs.push(\n                <Tab key={i.toString()+\"topic\"} label={projects[i].title}/>\n            );\n        }\n    }\n\n    handleChange(event, newValue) {\n        this.setState({topicIndex: newValue});\n    }\n\n    render(){\n        return (\n            <div style={{\n                flexGrow: 1,\n                width: '100%',\n                backgroundColor: \"white\",\n            }}>\n                <AppBar position=\"static\" color=\"default\">\n                    <Tabs\n                    TabIndicatorProps={{style: {backgroundColor: 'black'}}}\n                    value={this.state.topicIndex}\n                    onChange={this.handleChange}\n                    variant=\"scrollable\"\n                    scrollButtons=\"on\"\n                    indicatorColor=\"primary\"\n                    textColor=\"inherit\"\n                    >\n                    {this.tabs}\n                    </Tabs>\n                </AppBar>\n                <Topic topicIndex={this.state.topicIndex}/>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('dataportalbody'));\n"],"sourceRoot":""}